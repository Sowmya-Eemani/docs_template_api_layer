<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"f9626549a6ff9bf5551352a94b325d65d5d0d9f72d7ee0c419da6a187ae491cad651d3b2b9800e8a95d84a81c5502c147860a001a68b15fe1a99461a38ee08e81c40dad114e8761b677b885835fb5ba99d68afc2630a7c15934e22a5a00a7e5f7b166abc9a80b3b3179ac3386774abc0020a445ef3ecfdfc3f7c7e90aa19ecbc434e4f1acf73eb54a1848a9b7254f69a7aedde462af346d36124be602ea31b21a0e33bc47133ae34a3baf5284d34610ec7fcf45e20dae041528c042d32efa9bb4a8351d530f97cd0f89d907be13c61802ff799eb51de7ef95c3a3e42bcf0e0fa2fa05287c27789e530ae15c72692cb4dec00d532bb53896898549cb31d482efc39e761d85a55c18851216f8a68db9e101b53385d649b149eaa720183b5639e47dab176f4f8cf818fcda4c64d4710d0dbffa63e1f9666eb87103ac25458668fcfe60bf179fa29c9371eed0d1aa5711ca296ad320d0875f904d18f65c83ad7d7b9bd976d38418d394206405e862bc94c9eb023624212b71cfb503fa6b52c536c9b749e04f184d1250b8f31a59819cb69bf03f729499eac9cdd74a778c7c3e3966b016aada2707a35abe97e4c2114503c0a0292beb8dcd6bdba951a5c510208c95a584f522bfb83a566905e0111927a51d46172d971f66dbc134c52926f48e3ea61a1614e15b3adf67bc1767f339b4fdb4ffc269e243ff785b838a9c52d1a27e0f4acd703bedf7596ffc35f2dba1aa2c593f28a1f0992cd034f0d116f30c2071b841d1b576ad64e63c45c6409a7b1999f93cc1926f9af28ebb3567ab57bb0d00fff4051ba416b8370faf36f42ed1133232e85cbb459baee395840cca199546141707aed0fb7808d3e455bc55d593bffcc4b210db5bbdf1dad7eeebe4ae06ee3ae8a77d8876421ace1ec3cbd37194049774604e157866c949803196f5062c2abd0098334c95706d3a3fd06576b7c49d898c17416f8c107f9917cc60d45ec767b6cdce4e279165b8d876bc6a979a5927246519599158843749d6a779e486b07cf9d9606c6e6b575c7d4aece8ef90654d8a913dfa9787954f85d2c6e246aaead25daf4bf45701f4c9b541d9cf077b2a80d014dac323825038124d2e988eb0b46099409006cec97d3c52405ab58637153b78f025e67a888c53d361550a830bb99fed327a1d80b4a2ec0828fce9d0b1760dd2bd418b99001ca637723a5a691efd246e1d6c741e301a0c3fd6325e9387d6437907ba0fa550a658ecb9006a0f5ce1b05f53feaaf74d6d1cf782b879bf863f463ab37849b0b68b52f29def3e4be757e08ec97bc74ab6b19671cae4a2ef484adae7dd9da7b72ca2faff158c11a370b49803b4252ed1ee9fdd3cbb158470890e6fc5f59bec3cff267b91478adead9cc5f5d749779c16dc745314731134af6a831e8706b4858b84f803fa5a78545d990977422c1331489dff34937221588b83575b2a319e68f5afc2acc0453ad7b16beb45312d8484747fb24a68d60a1785249a4701098b1ee69db708a82abb5df4d2d1ca231b0abdc5d90b946c736e9ca2817e8e5e98fcaa71dd7a114b2ce5b1438406f6a24a55c66145ffdc81b74064782b2dac88977376d6d0b0c61617cc1b80f8aeb0c4ab07483a94cbb94bb071b880a894d32d317185652002877a6c5a3f1f34937e98be5f30decee1b4b2c17fe1c74f4834e7a5ab693d5ce8a91a7bac7aec8f3b49e26a7b906fc690972174f73c494143ad8cb228b99a508ad9966dd82e3a9d7363bf8148936ac06b5af0a0a7cf4737cd052f138290376dcef7e527f433f7aa22dfa7dd881e696d4c52d0188793bebac1f8c938b9cd2f09eeef954bb22ec8cb340bd84cf4e92c182e27af204b8d38f11a1b9c9bef056b144826daf02078b4ed099c4e9b63dcf5a086de57ef1dd508f7711812b8012edd2b4c0d226d23020c10616ddec03a87c4e8d375484aac948529f8ec082180b7aa74028e4937a0b175b3c0a616ed650fd3e551e18909ea8c6f54a6bf3418c4b922a662c97f0e7eb1a256c5041cee8e061a05471d6d319f9c4816326ad1f4d25cffd00925e10510191040fca2dd4d7f32767ad48c7f54dc943e14a49c90005425677742639c846da0c3ad914f8e59a8e8cbb2756301bb356b864cdd763a07f81f1d696123d8da7e14bde01bc1dd5aa808d1a13bdcf777bb1669eb9f79631257b00479e134bb5bc9baac405133e3c9a89f89f0c5e872f364d4246833322daf5f7de02544785385ed96451e523dad966547b98490c184da9861aaaaa3bc0c7c2ce1c2d7b9c9ad3577c47d5a5c15a3656cdff2acfe5b3513092c2ebd0aa7ec88189b559511f5ce1cef9ed54b61f18f3b8d84e30f40d77ff8848d3196a61bd586b8032eccc75baa9cbf558910cd329e186d66b712c4af41d8b4ba4ec7e5e7d7dbe6f7e600022c407860f443e9c274aebcf4e0db6ae43e85ba341c4fb375fe0f32c573d173e8cb561f7fc38f1b8b2439dfe01ece553c2d98f30d2477c078ac51026a245535adb539cf9ae6879e143ccac24ab9e0e5af42d3c827b16fba02d91c9e8d21bff95e7171255813a3c3d896fdf05656152197d7b51ff60a7571a0a2e1a1b39987e49cfffb7a57fd55bc9273283ca8c0fec919663d8e17bdc43afc5a0a525927dacffa8ca5541865216320b0f00a55e3fcc81244e0717f206fa21c81f2f9dad6577b073e0f5f6d15e1bf96858890436539af9d11fe785bade7bf4c9ce1830ef1dc865fd744b8d43689654716b2821f7aeadcf7d059ba14438b5b11316fedf8bdeb46878d2cb2c6fb52a78b0e68100df8b9bef4c6b82963fd6ab0c02878b5de507eb1620fb8634e03866344f563ebd113535d54c4dcd1ababd8c974ec62a2706d5907c21e17c95596f6a7e1c1e7a3da2d718644b553242bba09cfa31c2287e932b9db7bd6a2cae38182c3bcc487c716e8a7b98e5174578a61d6b9d49ecd34b7358c4e8fab8c3f200474b9c373217a39c99d3638bf06a49ff23c541e80e05d03fc935a7c3ad5160d8611ee36ec340194e9cd230ed4ebd9b631ba341bdb465535618b7bd8ed4f81a171d7be0140d325da8d72200e26b775e85edb782b1208a54375b669fbd5d6e776e50a6c2b8cfb3eb8af3e9d55c6f8fedc0decccae77ca2482358d8d4cc98dfad414a26df06a9d45b08840fa88c2ba81303f81b72ad72683b4cc91a5bdac6c24212f051af5ba61ac95e43e42d72fb62210a0dcf176f8c8f08c7b7bc19ca1a64cb3ed4251726cf3f82bfa32ab5a498a98dbcab2bd8a08661d7b3c7da68444af21a64b91972e22fe388a643c423cce6a34b7a3c1fd21c3115dcf3f50480bec86edaa5aac6eec9710fed8a0d7368c1681809648c40fc7f4e8b10ff33e500f4eceba834bd17cf892f4d1815bc77cfbb2e2dec2b00d71a4377441034ab09d9746a14c25d796062f27f0b6835afb799ec396a3b46ef64e09f23462fe2c46050113c318c938deb6b9935185e96cf38a6812a4b2835942bc4ec67bbd0e6f245514e6e9beaf5d30431c409489c459fc8e24bea399e22468042965faaf990264ad84a80058ec05ad66fbb280d4f10f497d6c359a45b42ef83f3c5d302bcf0bc81324a103efefc4bb911586ce4c396b0597321fe1cdfde26d606b1feb31d604254192e63cc03ff26c9bbff594e43671132658b3821d3314909e408e71ce821bb3354fb88d350e814a6bca80c69d1a2280e779ad5b5da4b06b59a5b976983bf349e04709e4096487a19efcab3917ed1fd2bbbdc1e14b63df4e10636d717376cf4aa5fbd822b7e1fc690476353a7be579c1b864041fdc9746357100885507a52cc1d241cf5dfb8dcaa1665dc7e961e32f38cfc78918308076d0e0e76b7814516f72129ee8123a2b361e6965527df9b4d50e3fc27b164386bc134725e7e1364e555fa27605f5f2d89fa4fcec3504238ea1ac52053965305c5d240ac9bab496ba96af6f0edc892e442634f70465492fe130b1bee0afaa998dc44416898f7107a7122654bb31de8e57fd2395432eec947be50bd1cfc8fd99a452affa7d1cd3cc46c8c7c2a585231424da1967cbd34236d744b411dcd672613dde50c9dbf7b02fd3bb32c781977134e6a8a66fc5afdfdc0a76cc42a3499f8f1e7ff85be8f3b95f9be9df98fc2ac7600faeaf66dafe33c015d024cd7909b0cc40c7adfbdc4d77d3381c7713ceefd4595184931fdefb0ba9f71ebbe17a0e1497f26cf06645176b31d537820d787f41814895c1e7f52f4c15b3a2ffaec75e39aca0379a950c3c8dd4cf1c7c8d00fff0f42c487287d1a7ab31127cbbcd236d05725ffc4d90a7e58b1e57c2e2558442a7dbc6ff4a47a93a4cebae522a7c7b81d10a88236bcbe83bb1febd11a4ebd7ff499eabea443dda91e8196c789b7afdae5869f87b31f9d722e7c0027f2ff2e267db36f21a2147548630dda27959c9019a54dda2752fc6ec25905cd2088d8ab5cd56e454c50ab95363f36872b46d085384840216612eeaee13fd004cddda9a4e6633ba41eeb7a4c598730f01b5c22558b5fc927b4e9dece08299f73ea26599ee6d1e83da0af68ba8c374ccccd7ab292c222e46248f31ab952d0ff2e5f62c1ba0f5191f02d2ce0fa75a02be078db4540534a09e9e7de3831903918862239062cea54ab2d456bc6a4bc08e627de58e7a5b0c69eb5e11e748b692876f7bfd08ca8c2c3e70173a2bc1ae7cfaea70e88cb67a7c79087d6c0ab636a0b15dfc70abc00425e9e03b34404bfff44c522ab931d6a128dcb213096d5b99853e831490f06ab956e978c453a6c27ba5a21a1d8f2e620972d9de4ae0643187588e9c7391e1be293477f96174114d7ac9ed836a8aa65519caac6455a99403ba09e4cecce3b93582dd5e186892aa522daa1dfcb863b06f07ee7fcd6d4dd183fa57d26999dc2d872edf77eff98a04a1ab5342c151cdd0bef9f9be3628b98d0a5e45ee8167446101324ca087f8da2e167f50a86e570ec8962920d2332aa1607400c4b8b56ab98a67bfa46bc7f5b2eb156becff176","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"731e88edaffa707c0029a6b34fd23319"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
