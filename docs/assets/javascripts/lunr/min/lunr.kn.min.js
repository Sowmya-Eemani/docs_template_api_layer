<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"5676568b41debc43b061a98f62548f2d69e197fa2315999e0315a2959aab3209fdd1c0d245e9ba67fa2914cd7e28b7a55e23f33302cc37ee09b587a822ef9f48df450158c5a31c4118dc498fd3d48db124f34d80868d9d93f79775f6eef17893647284dff1f8351efd5c3436f6d5d2db02e56257f1d337751a5d100d55572bc1dd706b5482fc37f7afc701699326df918424224ea3c2d834795a508980818c95306836403b4ca77d3a8273093672629641fb4abff22b8316e33aea16a3cbfdb4c5ac2063fd78b4eabdfbb7dfa1cad37012940cdd4a016832aba1a4215b9b26a61a319fa48c43b50bce2a255f8a96b7fab915ecc7791e067f84887c744059ddfb805e24b6e8f7572ec681b9ac1c4f5e9e363e8d355e5b6ee7316df1e70170d886600d30769d2aaea50c264e8853a2661e181d2c3b77d849b2ce5f86b9cb2b9864d2aa2e67659c70ba61955201aca69a9d8f6b07ba2bde47f5ae955ec2dc3aeaa3724fcbd7cbba81293208370405c16b914e9d249dcbfacdad0f4e2ca7aa7aa0a6ff72e5811f48122d589711c4d39ceaeb527b6fb3fb937a1e7bb6eebe96316424d57287225b7f43e898be4bc27a24613726f6a1f25e75df08a6f9b876dba71615ca64b2fc30e8a79d301630a88e6d54bfa1ea5b0a9ae7e51e4826abd2591f06fa70637c442a88ee72e1fd3b597b3970b5e46f61b11137c5df7f7f182686c0791223bfb8e74b1ce74d06b3aa3c16b4cdbb4bd5b9bd554ba3290570783579e9e2a3f281cc1ea0ae7ff55531ddf83313b96ab7db049c7126ed65377fb2e8067f82890f9dca2a220a00d356df84fe8db73b3ccbb2fad74c91f09471395717f48bd7ed07b8a02c11844aadede653e21172bef5dbf1dd7e9d3beb6dae20e1177b5bc30d6ce4b43993b61b333a35fcdd6394c74fe78b3850069669956f7b72c9722165309524e6f09761146db64489435a64ad834a5f899f07c3e6d6031b66687adb8a3f5b06756cc0e66e2f0fc4dabdbc0c491e61e4f1b12f607ca1bbe1c594d93e0cfbe39279010a970026ab579ac7bd8bec29c8a29e9aaae00a870008fe2d956fb68414da7dfef2604ebcdfa35a7f5c734ef900a50731ebd7c738685aaab7d3cfa0c42e384b0640d417b8c8f384bb884971787f6bb74e163e3b1abc0520c085958b35e2bd47be95460e3c38d16933a840ca66e1bae5deeda83abccc5d56114e359a0f4d5913668497c949959749411622d6b63700c4fb5efc4c5a63ddf695b0f1e4fb275d36c850f9dc170bc08f19077c29ce386bab285c83d2a0f5ff763580b10829c61d15e6702ebbc0bae6bbbbde6ff0e0bb27420d2663a1685cb28967475984abef1101b4c6043fce15144119f1fcba0485c7cc4a3c4e083ba8a5d094acc3a5de617e0e4ba1f36ab4edf48ea7c3a558c2d398d1a05952f702b99881d7fee24f0b81cbde4e9c13e3d77e8f469fae37a718c8848cc6a541bb8142dc9c2438d8451fd5c12e49d9663a5c1a32cee06ad11f0318e53b0bc8b94f718ff405419e9fa32eec3ccbdcd9d0ba03683c5186692f34772771239d2efce2de77c57ff9444edb134667475a209ccecc197a0f823dec551fc2ffb3bbc3137a6a0b340b63896acf0926dfdb1df39340d025acea16d340ef9d3640cd486ce5a7d1e32a7b5d8024faad41dca3ed527cdb287289a710f5419f8ef9b39d0d5612d9950e9a65b59bbcddb6e4ceebeaea8f42b7cd885a1e2b893b84574970690f94039ab3abed9e93e378e7927dec815430676e39f2ec8a005a4041a860382f9e04f0871d4cb0bbd269ca2389fd85bc3b68b422684e46e43d540b2d6ef00473de7949f8afe77d1fc9b2050c3e02e00bac396534bfb49e6ff3c84d3717d7aee4b8a440a24df75d784390f25a85abca65c74d4841fe7c8e789ada3d8c1ec61d8a6e41071dd1da858d1a191a04a49b93be3783326295cbe44836b9a4ee203790d8015186ca94f7dd81f1df00cd8e3f957b7c2ecb4319f339fabca48ddccdde174e8fc7255383848f300ebfc5bd6baa98734fcc81df9cf45aaa4563c934ab029a366db49e3853cb4942c60a89e937edd75c45ce0d442e94e3debbb3a10b68948411d36763fa9cff3f4911ac8e156fcba7bb0a2eebcd23eae29c304f6ae7db496d925ea74a9672d468206a5eed41d47b17cacb8b03b3306f5394b2f78c805ad6123bbd61d7a4137bd5740d440d51aee099f5ae2f1bd5df6e69289f77b4685e0eb4cb77c52f561283b70376c56945c45c870464d9f3efa38c8f91fd4018c97305470198fcaeb7f809c32c4b46e2bb0252da14caa45ff86aba3743db3cdefeae978552f867e47d36de3dd201845c0ab94c8d2dfbb83137df8603dc9355c154a90de16b7fdda78d65143f1c09149d244179e45183e632c47343bc60f229060f6514c67e7e411390bcbc2723ea05a470a4b28781795495e0baf5e8bdb25fc5ec7e75ef90002b70a9b937c0ca0237ff8be66c247b2ecbba57cc15843490ca83e40aa79b5ad9850d429d5bcc24ad5597718d29ea2af167a2d8514dc84be05ed16791e28712de4cc78ff5617c84fc3d0c3d47edbb3cb139f032b1960c18500e244204d17be1a2822d0b67c28861910ca8327d1c801357f0ab5f75181eebbeffccd18e1efaca65ea8ae092db0e1b803004f3319320e87a0ec9bf26eb347599640709e1454198f84962db8395fb40f6b20d9fd1f766a39d326daee2bc09dd9c53ea3820e6eaad711f2ea58ecd61fa1c9960feb977b23d1252bd36fbe857f0e2f59f498885c25a35bcd227813f453af3ed51e352f53bd9f6e64c769a22ecd593b03c9c08fdad0d1936d74ec824b5036d069527365a73b2870a2625f16bc55d99cb641e864a5e019fa51324af6656d67bb566407d8c9b30d4113e3f3288c4f1b12bcdbdd2a09328d30dc564be168d96341d63acd31bf39f68acc308da81d08d1c362bf6069cf94260ed3dbb27ef58eb7e78ce68c1e83a269ea39041ecd7a9f30e3e771ce6c913d625bd683b3b8b3cde357be5f46d0260a754c796ca7285d4c01e990596b5ad538a44b81ae1c2f8fa528ca0d314173bc83833a1c540b28adec269f2862d2b4cfc08ab006d8307f713c305830c6905268af91cbc81cedf272bef40d8d6c0543643cc177f046ade22aa895397d6f4b787702ffaa3fe463bf984af3b77c88457f1e6e4b5968adc755097cd62ac2e6370f768c38ddbf8533afe82e77230e92d8f2408a8a792c9bf09ab17ba7459b462523895d277727e27a035ba776baceb9c0342aed777129a60357c17c3098a3eba92c27edf28d6a63ae1aad1ff7eceaddbe56aaa124885128cd80fba92ef136ec9ea95d8ae2e5cf064922a02176cba72abf7ae893f44fa00239ebba8adbf7a08b20b1a4aa96e2c8797f9877b944b9112d27176ef72c699cc66c052fe0a32687f89f9a67de0606c77a5a67562cb1e11bf35d779638daa5c32c1ee5ee0a069498e0f543b13b95cec746c402c3440ae5b8ad4d0151b768dd3a7a8204973be4cebf68f3cf90376f1038c3c1cbce98f587aac9aed702635e570667fc44414ca259547baaf94122e9665ac685925ceab85ff049ce9a1d3c91a17156ed664120dd28c806865ec187d30055b3af152c296032ce5590baec9cf3cbcbe69f835c468b8d860c6ac9e982c61f6e7565218489af4c72fbd2ba54965b987687e2eefd1e2c0cd5160927ffedda419a79703a4ac61c18aefbc1c39f5272dcd790ca622fccd189076f5e15c293f0374d989fc21ca1ef4485509581b43e678f5f9226a1581f8f16075a6745ecb2ce6268167dce3739d11a911ba6115d83cf87be763d0dbd6809e90e41992ddd0d9dabfd2bef5e10657508d19555d09a211ff7d8cb12b28d7e46baf961553fb1c2ff9ff0bab549bab2a54e769d6673977b47fc16179437044023b826fd14b1b2492b40fd51bc662b4051d2ab205532faaf05fb715c32fa818e8f61579142126c85a97a11f5fcbd01f744927c2230755426e64a98440e124365199f28ccac9cdec862fad6527e5456bfc32399c4a22da957e9bce48e41ab59de4dda9a89b616c928c3ff9b0c67675fd64a9d75e8665f8a6931308d266e1699389ffdad2901ccb24a7602cf9b54e75526dd2e6f28f73ae65e36f537a6d2b616dd0d0109c978003974c4b61a26dc72206b299568b683f65334ec25b4664aac78ab4f512b8884394fe4d0ba28620bca256394474cdf192696f38749beeb8a73feec121bc717cd27cc3f09cb996baad2098e495e637dcff81fb4d8656a078f62e1176c2484dde861e9ff2e73a0d0e9df0dc8a9963d7657de5fb6ec942c5d850a343c9e5d31462b6b978be78b89bce7a5be2e6f285bb6f1dbe9f18ecc6a87e384f02d3e1da9088d4295bac0b2f618444d15b5ac88ad6b636df164b20330c6edb68d9a388b158c2f4c14ab08b1f57939cad1e41aab8411e2522e27b51e6fb256dfabb2ce441018ba03840d9e0ce3556e7f1978c9d84fc11b2cccc1f0e86425d6798fdd1170e9198750141dfd027f129a94f670fd82de3b4120ae6238f643c6865ecb98bc38be3f07bacf8bd9d3c02d50b78bd4d6a76a3538a533566ba54f6ae970d0f3b64b4aeb93e0533fb3696d9bfc760811c4ae24a4734fa63d2bdd233d383d9e8907cbabf87fe7b75064f5fe4fcd4e66a2822ffb272b7e8a48e0c9d9e528ffc7275a06788144f6e2c079823752e3da74aedb65baf99f7431a9a11fde7bb5dffbc19a14c499f374b64cb818b24f46cbcf42512149626f778ee5b05682853757c5e6a9febb713e7ec8d82851b9068c5748d7592e5e3c869c67d8b777a476bb09c82c22df9979ed87e7fe7bb756da55cf7295c5789f82770dcd6f98f0f872d1f9bb0bb647a6911931ab40deba73b1eb0775ce004d5b1e186ca8187963c1e5fe90bca7dcc7710feac5713414b252280bbec02572d27bb9187f671ba852b82eee3cf301553d054439bfa7cc7fc602e59838a4c79547cf4604b4ff6b8a1578737a61a415f51e6f5a6","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"731e88edaffa707c0029a6b34fd23319"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
