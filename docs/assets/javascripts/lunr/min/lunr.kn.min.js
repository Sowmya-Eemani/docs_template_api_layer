<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"b3f6aeecda321d63330f870626dd9e0ce10908ccf5bef14cf4f03fb1239e01ee6629313873b514599bdc7f5a2e47f32cb390ecaed1548739fdfc8e40af8b5ffc628d0ef99d949589a665f6f8afcce4ba1c3ca0819341b736a1a87fc4bfb7bd44ee6d7015d7a7083765ab2bdc33b66797390a50cdf965fe17dc854497a86247f858b8ad16f878a7e5806cc1dff769823b6f5eaf2b905b37e962a38b623b2c5adf29b3b5af4c6e0198d1ba81b9a529b81f5f74436be29c93b28223854dffb11ebc2ad78833a4b0873842edf785904199bc948247a43792a5e2d9f3529fe8879069f120ce1db0cf98dea70c32ca636777323c0fe0ca08f5e4bea8231a7c43bb54b9045f503112bfe149c9dd1c9fc580b3275d318a428485a7bf108578ae36a7a27c64914f8997590b147ddb99e8660b8d572d63d9c90df0823d1be094e364ce14ca2f055b126ae508bb6442ebc95c9d607076a27f1316e937eb4cc3e03c48f373685c0cd07c0f8c48bdea4d61b91a55bcf313aca8a3261cff2747944a39da4c6e29c8e73204364af31640b59dc14dde67ce55bdf859877808fdc34bae2c8c5438e9b9fda807e6f21d67a5a1ecfcca741576485d466182c4518a5d44bfebe9becf056c7ab761cee7a61040805bfec828bb5052b310b19f11a6e52efb396134fb4fb09d13d886c94ba4f80d2f05f15c0dcb80b93a43317478b9b332cb45debf2c455a1fa356fc3bba5a9ca8445a77e08ff43da9c0c722af1433625f1188fe1b10e1ef2831384b5813d54ea4f97b9f04c365449ced5ff08ed31bf76a64c2502c919910ec388d2e7b6da785157d9069979947c59ef015de8e90818dc10e3904049ace5be8b5d9be059a36a8f64db9d78c7bb0027bfb167b4892b4fc3e9ee3fdbca8d7202673f7a70edfac26b9473801f01053102d7b7115128934cbc73867fb8eb4b2a81d76f265f9e17571046f06e9ea99c5825d9953efae06cf6e84fe6364a5a45cc54f08f9dbb7e417d2d8d5d7f4515b45b10865ee044f0cf46900c99305cb16ca190002f96c5f21028c4bf42e6f7969c78a8d6d822d14cbcce21bb24ef5a05a5714cbb1c640a7b81c3a7681bd7b6d176b868b4aedfd32cf47d5a8fcc480fb851afc468af352c4e0d985d82bd673b379232893082e02fb87f78ced355c55c0fdcecdb4fb0ce726025e94f8d957538edd903d321e98aa26cec52fa6f97f7c68c4590072e21829edc651e803c3f2457d86ff9619e6f4c3f196b273d3db18a334f401022a29d361bc6fbbf38aa6b4dea081a5c05a204207f80278161954da04962a753445c1fb1df1604a34a7c2cf8b0e1e40505badf59fab9e67a1d1f4f419d1c693f11cac186c7e2644b4a87a1cd75399319862ee66d93c40a5c0f774c223124b51763da8130af937732e47fc88b2a764928228cf6d099fa59636eb732d5b2544c3e20f115c33d30f3abb376eeb855b873987946e8158898fdfef3322820c0c5611b389edf374aeda74ecad749aba4b51d8aafd08f4fb0412fc23fd92b93bdd531e9078fa7880a4911e9d652bfb396a5dd17ec2a18bd09eace4e54b56e0796e661cf042c16344fbe8a8ce950fadd4be304c92242112705dbc000806288850590c8aad79316d97b6d4b9b9ff9c7ea1bd152bacf6442b530a5f482fca8bd8f3dea3014773f145ee2e3ea2dc25f5e24382d074a754a93c42c2a96daaad1dfaeaa2f8b65e84fae2a01bc8ec5701e560945223164e0b4d73c83f97ad78364b74d993bde3a5ebe32d716b41a532c945e764cf7ae7999e5f2010eb84fcf2bd99fef901c17d30499644ccc60a8e650ab56ad13c0a50b691cea11a922037727788fda1cdece973a6a79138aabc1bc0d9c1f773ecfcaaa565fa248304c0605bae16fecfc18635f442970084a50276133ecefb66fe9c1f3e3e24b9692b038a1b23f6ba08f1f091fb841e5161492603066285bd57c6487d585784797a8ca38760e9dcf25c669ccc068216feb8ac0ef8640f77c4450b14515b6d0373945f976d7236927b737edda567ae20f1abd67a64e4c7193cc501ccaaf5f04b97368d51ae819d8a282c0db204ae964fc5af321a3fc94dea223a3edd53e58c5b5c119d9d389d1189034b37776e108d44a9434ebd61ca1a3519ed6d6b8190a9f6786d54aac74920b4ee57e136c23aac337c922062c3a0150117ea9883f4c8ee898b101fd5dc76fe1599e900266aae1f9294976990a5241053d2fc2a5ec2fe1c071358b6f041e8e67538fbee3c21e6c535abcf87cf3d157f1ed259c37a9d3bb14b55b24b6e87e9dcd3e361adf1574df7670cefe24bd6f55ecdaa0897bbf159ec62a6883d25888e07f075850737f183c326265a3654ee5fac486d51bc827dacfb3f7144377b781fff7c932151343d5ab275bfa4e1e1c25c50031ee4839dd74a266ac5be271d6a4b0856829c99e2b67473decbac6bb7fa828175a9b6e16601875ecff2a845de9f852553f8f7fa103745e3887c10fab4017d2b6552cf89ce82f5f54583e759e3236840984813e70eeb40f298c5fbc94d9c4fe08ae1d49a81fc63fd2d583f26e69f4ee11fac0c9b9996569bffa8f94ff5e0dbd896be260497f6fcb578c29c56d2a931a42fbd057a09d3267f6a755d0d527a1f46df642faf167b8df55d78c27a04658fe1fd611771e7bc3cd3f773c29e38bb17865b8df3575a21019e3eee1ed2fce94fa78284450db3f58d90d345f9b7a2a453272a580a35b635b10aae72e5b6e2b103adddb89b52006245a371b39709d26818f98cd63412795fce5a4e9b066ab61b29fe9da1d6630c4667a7d09deb43f91f1f90e7e84a46c0c5530a6fcdc9ceb0ff0386517a90b26c219238278917cc5f3cb30721966a255c9a51c65b66548018e1cd4d8b68226375aed1e44d2db24cdbab3904b0ce1a74ae2b883b21069a9ffdff4a247ecb5e682aac2361a9a3c38fe12c22e98f81d497fc9679483326e4fc2d7a715f0fce11c6322b20f47cc0bbca63854b127c0e4ddffee1562a1816048347a35197116a549de921d65cd24f5d88d30e2bf68a3f760f2eac46598dedaae3f955d899ea6202bd1b9439ee5dc4dd74e02f3f6c12970e239bd9390061c2a2bee0dec410e4681500221de1eeb0edd60696f86454f51fa019df8edadb4108dc5c3cfa061ad1bae93e170b09fa75d4c5afae9c46561882c578c9a96c24fe2545541814b2f54dbfb2c0e330e9a8891cf562b6441b2a840d3725cd2ec1ebc72f2ec29ca36d5f44f5f11055e8b91d31a95d1c99cbfc5254dc206470ced8881e9c767316a819699727ecffbd669f5e55b4b470bf4502b9d1d0fa6419140b3f0f48a94adb288a343b00559c1f191f3eeca04fe5f53cc94226333a8049fcc87302dea44dd55cbac9f77696a9dffd4e636d00f58653527b2c90c8e0ca65ebb564c9ffc5fde700680b2bae650a756493cc396ee5cbcc5b7cedc454dc9e1de90f5a20274980df0c1c84d758426eb724249ef920610c3b7536c9ec42e5f6f5f495c41b322341fd33ec302bbb837b37ea1a0666b067e76d1e65a09cd3ddb2103f6a447759b9d09f6e95d201e66f26996a13abcb3b6f3bb9c9c3d71aebf585ec447a9c2034b375ee396af9075e660c141681701f3f832cdc8779c9db9609cd2be9ab5d863fe593445059dce52a2a81320aa005728a51076b3be008e3184611ff870ed2d8e7db3d4443706f745aaa2b6ed77a23000e9f262866dd65bc716cb38b7845d94fc63204285b03b6665bb5fcdededd0e1b4b9556a5308bf4c01a314642b32428e789f1ae69517c2cc16f477bf5cbdaa5a498ae85754b7026078d5d3f67601a874720dc452ccc3b2cb3a7a7a7d74549ad61fd14167c89d32493834b4c4b0f4f980b1dbd24db7a4dd102ce74fc5c7ab864e8c9f3c65565090303a808890d996fbc6b276567e13d3cf7729e68194d0e977ae1de5c79212e711c9e598dfe49ae43767520999384212f9c177f24246215bfdd33d59b41f12c99ef234ed98ee3fc490bf803abe4d0f8737375219bb5b221ab2f97139cfe4fc89e9b93d0fd9b40e75e033cd9e3772ff7120e8353a68b5340da8ab8691c64d12a66eaf65fff6794870bebaf84b9369307946d9282cc48b93e837c70895ef195440d22ac1992d019b8c0fe52bc32ea15615b88b7e4f7cc1bc54aa75c728a48e8fff8e53e35533c0b6d5398e5bf9477b5bdfa9450b89dc49b025beec28a12d743741b843fadd8a850b6822d03cb1d510ad31f6498f55bb82dce45ebb94b46fed10b625ec345cad923a188129cd4b49858a013a8df3ff0af51eb1413fc14da94971903f5fa337655a4d93dd75c7de5458dca0b7341f4290e9935cd094d9a935104c2889c57eedfac531e1ecddbd7078c930a9fc3c8ca96db02facba185fd48b34ac39740a0b8e6dc46fbbc83f588453696c9e68aa61b415fefb3f2d03a798d0e8ab4799c7f5d861c1bc8b68effdbfdb188b6d47c17b247751090fdbd798e7faafcd9d48664b4028520b4d9638cd9131937dadfdc2348c6c92611e4eb57d22b3ba26bc5b4db1c3c70309f0a5607224ba7e0c15655d286cd8fbf52eae6f3cb8c41f30aeb17f0bb0f67f524a351cd16aa5da289d54f2bb808c4be95b468fab474a394a1b05be01ba2bccf4de608c15b847a405a4ef902af07d5eb145c24ba8820dc1f40ab941b3e46247a2a01c6aabb83c8f6124eb1827f7a4755514fecfff890e13fe3aa2f26098d9c0dcbe8a25168e7b8e90a9fa32e78eb8c3292b9ac88642a38db99eb6efc1f5559900e88c92b9dad43d1f1bf248cc36f063befb0c228fc91c55b7deda88317e9dc51f87cb63dc1c7a18eefe507994116357592cab6f06b207ab3c7c8bd7d5bf5b65c0c6f30009d86f08836464b3d38f8bfad335dddea558d0c5fb33672e90e4974002fdd8b76d55600b9f0a940c921f9b62f2273945ef0a21bde92c71dd6cb0758f13a480c1a750d1afe9caf1eb20d018fbbf233db7c5ab1a64fefd34a103b666b280484be8ccfe469b02dc2c29519eb4d5c7aec","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"731e88edaffa707c0029a6b34fd23319"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
