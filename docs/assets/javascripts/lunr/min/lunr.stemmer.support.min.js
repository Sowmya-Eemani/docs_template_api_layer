<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"e93d8322d59715fd33e93a4b18180e136fc07dd826ea59934e17ff9a7c3bae66f13a2f18818e292ce3d12803bc9db04659cf65a97493242f8be83cc0019e1677659961ed288cdca9314011183cdeb9a0502137cd086749b0175456c8236eeb78e69e6b2229987f33b60666d6188bb904134412b3deb7bfaa9e4a48b4238f0ca0efc0d916e25caf44b233cbe4e99d4bc66591cdd4ebfbf08e0a5abfb54ad5421bfcd1ab6dcef568a81655fe5d620e4988e274fbc17690bfaead178e5e301fceab75b6d28d8fd3af2b882957e8d8e45cef3b9b0dc2268d2ed088bab2cab848f3ca6158e7a48378173b218838f94f39d2acfe767ad43f95fe2ec76d39baf159472f98535978833a42f5df44a6f3fcbf65ead9ca00ac1371ea9f87e9e347c7baac7f861f7657295723c51594b374081566b90210a65edc54edd9bc7cdc03ea151e19391396aaa5d3ee91cce5efde39807e99ea8923b09ce39978cec3e5dc8b61f034392a6c07c631e2abc196428fb646a81ff299e307d5d3996639da51e0c7f01902f6b98ab85e055abc30a5f321d961ea8355a14ec6bb1888d83a17c50df004b2c86003648cf25ffb65bddadf4fc732cdf8234c7ce832f8f164edd2a08200b3c18e4a2afa210fe27bd1f8fc5a1704b941bd89a78c78ac47e9d3c881fbd378b410cffc0985ea5b66dba816d6ea9e98978f6ef16055e302005f1df1200b2e501aeab98b601fe5f5951b9dda2c0d0b6f38a6be6d257824ea1e01bfa177e071602390b0190aa621c7fc7b22ffc7e525fe249f08f49693da9d9f83fc872c1915ee731cc85ab2cf41254bd0c17a4c7c01488991e4f62f8044621cfab360aaa9284d6411190d33b514f18474908dfa02744da1363291c34901b4c90e6072af3c953be7487be00392b4eb1286c5d5475dc3da7d77d59eefdd14371ec161a83f49ff2610e7fa35fd62169f31c1f0e1ac53e8d9696def13dd952869f52a73768f90f44545695567c7f2c7cc3327f2b694ae6c96874991eb427a9f13b2472b5b101ed5c3119534f916f09ba9456ff053717505ba4aa3f54b931152c2680f7b1feefcd241e970b2cca50b30367b98a1f8e73beb1a4d22343095c8fe4952b05d2d2578bc50cd2832470542cad9fe9ece82bfc7ba56dfc43d222f4f84e001a5c7151c627e12f0845b408fd1f7a5bccdb8cd014fdeeb0b7751c8e57e31ae2a2bcc16a49ffd017d41fa7dc16ea97921c740f1f28e790af15ce4bf14de99bceddced101aa3c952295ed12d700f94d3b601a77cd7a4d9f9e1f2088ff736d29fd0028e04a3da0066e79df1172c9c182446f70f95162d88afb25f405077441cd2671e6ff7e19dc9aedebf2e096f0253ebd3d5fc228b90450affc9c9328c6f5e068f60e599f0fdaf22e5f7211c589387cfb3e347c637ec49a8271149a36504ea39d57cfde7090522443af8d98d2cbf1711d40e159dc21a0f96b1d73203fb19203ac6073dcd8d11f2e0212e5e62bff52f43fbec4e2179cf322ca0110d6f6088f6051545c29052b7435df590d9d834bb3f03539b54e3c4f9bd187dbbc3c77f58fd0b0b296d47ecd21d9b0838d5cf5f9e68cd3b58c429a6bc009800b5a111d8f3652e0e63767f2124fd2b11668138b8c228930e37500e6b78dc039a9146fbbdd8a8c14b485f5b41ff14727017d4503af29e6cce9225bf68c2261da66da523cdff8a9b930b394a90c7928e6a90e113abbcb5681fbcd8f5f5513523d49ddbf2d49fdd6f1be079b008f014c67c822e0e0ad3f129b4978aa206807c046b8c66f06518dcbe81a7bfdf6589db984e707a82a73b5e3e0c9a8d5d17dec743db23ed5066a2cd24d08a1827d07e9fe8023227df27dae2fd5c8b9ef5b061200388dee84dd3170465626d0f0fce8c9c78ca3c01a847064f1c77cce0c17fd3531ee9a472c19f83cd9d0f1754abcdf597bf9002aed8e72ffe58cec5699e299d01feef572f6aaeb2534cd643d15bb8a2e7958af4885fcacbf8c5251bd4ae0c8e593226f0c8137be32bcb82a3b7859f864b0e9fac1409c87b3fc2bd69e7fc531baa891c3655ebde9876c3194cfbbe3db5b2536cadd226ba9842e9563ac847ada06068ba04e59070fb4738fcc14c31b176e58e04f27a98d613ec6cf2cca0032ff43c9d5e787e581c679131ad8fb4fd1444e30951d9e258d5fe0568a843a8bfca8d7e477f9833e5bd35811087a002a2ab82eb0f0439ab86dab8f0825f440916fef39d2c7132bd4c5d2556d293d31316c0ce6d755a134154156dce9eaf60eb3215dc2e152abef6be7a95b4d0afaf768c6307ce3a2d87f3b0d0c41c783aaffc52dd89c9fb1d755a9edaf3271287491ad7c70a2d1bc90e0930a3d5296100379119a1819326a3f5a529e19f13a75ced1638716db8d0ae77f39bf82f61754b5d3aca9fefe841b51707fb336e2b18e5241860f8a59a672a9e3fa82a8bee2a769bfe9236e01b33b640accf4c5d9818ef7b12c48a52a5db1c921da6d8c9f5eb282146ab14677d3076cd9c8b20388f365a6d5036d7ee9494c6fc9fa7e52d7612634156872e300593ae3fabc31f9b7c45f012593883d41302d60eb8072423ea311c4fe631cdb4de882f191bc1777c0891d71613ebde4c4dacd2fcbb7a652d530fb1cd3c5c813555a1c51c8abd6f916e5cd5ca5621ad2d8f17434e20944dca226d204c684d974c51c4b1b6a93b604f67cc45ec6707e9b52368610ea7d81e0fda085d3a7a53609cbddb96568adc15bd3ddcbeb7694e69033a33d17648d5ec9b300edb664e73cb7a2b03354752157b0f0ebf562b81ae5f05231d0a062fd8389f40de4262b6956e7b35820a029eb72783444bc4f0cd11d1981cfea5973670f53ec09096f46e1310e17d4ce6ada941230dce9248a0d92539cc45da7292e34a329d67eef954e3ed2887583272db7a57652383aafadd0e21d20887f83210d7c429454264db2bfe2efe51910fa13ba402fe5776db20e8f8ca1b9419d1e5670c6b162f7702803389d52e3c960e68b0fc58dd9ad1358d5ce8ba84f2cddbbb4524d7ec66078afd6ba39d53fbbbd2f6d4f2ffd9d29f4c320be3bef7afda17099008d5a7df405edb74a4643e74cc68b51bbf1e52dd678a2882dfded02d9ed50ead406cb3d27ce490a2ec8063285725e69f2b8f49f8015d00ac99ca175fc6363b8679c008129167bd637b0a4a9cf7608a6b90b1fa740dfa6996c8af6cfcde9e286af0b1b0ba2e3a8c4b7e9daf3b00e799ce99be654c72d12072d135a928818a916678a3823ce17adc70850df08746c44f848d0b38d8bb31a78a2dda5460786e3e48937c115ab1d5e4b9af178380641ff114208562bdd70109d8b5c20d926c4d2931eb629514dc587a03876900f0778c124eeb84c653e7a4d58c7f3e51d4a6b2086db464a0580b44533bb6fd0ea88134eadafd2cc9a46ce818e785ebd40fba550309cb3ae6de8ee53298118ee1efc122ffb60ebbb1e3b7c9d3a34bbd30ccd3e3610f5964dbf0e0cff79d45a4d112bb21737fb7a31631e9f7ba00503f11dcd00e531bf8500754492ad253be49de2dce6fd23095e6ad72acf0efb0c995914e8726004db9c1d7cae4a300fc45ea17c71a2917b857bab3e3135b266dcdfaad7008204b3485ffa7caccaffe6163899fd4955f25ce832f667c58ad7c522ed88207f6ddb514d31312e934199d6e7f954f85dd894e27e3d6c15366287e4dde7686597596ead8bfdc2acf2b8e018232f850ded67fabdfd28485c18a511b32d8d5216a0b3dc2517c5f08296193b32b186d397db1d4c33915eceb1c6e2f6e2ca898d3b5db80acbb9883576602e6831b3407a47f4449cb1e8a45759120ab26f789a71800b945786eeaba88dd57920aa0187b44554dfede927af84b147a76a53b17c641d312aee87038e80b08e3d47715afbe777e66c1455394d668078dc652713d597d99f1f90265c64e5586eba6ff4ad31508d4b0acb91e1afcaf10d9992222df491409ed542b2e0120497d9b988340ff0fb84657a3e114655da3c2ec4318a50f525ee0f36d5c75f7f8905a933e02109e2abdae38cd6834842d906cbd18436c706f3ac2c5263f46c8e1b016fc75cd5a2e4062c1ca7aca08efe0fbb1ec69f697f32989fb75ac0fb167dec2ec0b9b9c7141c45a1413801bf6a5bf0ccfd92c69625ee45481abbfb625ff7317808ee954451c08de67a7456cb32f3cdffbb505f357fe520519840f36f43e09455eabd74e0ef65fca54b5e8c74b527a4e2f3efd1ff263b8b20dc42fb32b91ec0ef2e9faf43bd963564a9760b9ccfd007d83a0290aac61169b21233b1e6ef995bc507fdfd2ba8491447074ed66ada04e1acc60a6821fbdc032a2bf8a4078a7b2a390e9a05b022365c91b1b5f1f7c5e682a51011b973829e476930a570b563af25920dd331ef3300b357c1734f4b7c2cf78d5c1a2ce8711e853e476f68f1bd227238e28e1dc96946ad9b00a9a571d88e1e550b9170b2a21bc517a1b16b91237644af2df5bc604affd1ce33b7771501e098bab651e03feff2e6eaf5bf83601ace039eb42e385ca38198f05c755e3314f03e38e5ed1b2781b501cf7a51e3f2351dc959339b5e35dd74990d984a53a92f54638d897759fab1c57c4f799533a1abb582c3af71e3cd52ca25eed4ca082205d60a37526ee1c55f82a7ffc998e0a114b5e1e4410212810a3d37f0a10203b38336a717f868442974b08ddb0ba6ae7010e53810f50696323219e2452e482bbe82c026bae702258c4677a2e02e84f022e2ebbe60b162632488156ac0f0e0471dfab43fc6ed5a442a876236d9c64173d1fe532a86bd47bbe123d3ab736bfd2c218f37e3f1160dfb61086bf02933dd12ad5f245160839e551d5a42b40f683a0437d31cbfe0ff5771e8d0267808865fde1b487b26a181d89b031230bf2ffab1b953e10c79a9af7436edf913b63780449605ab6ea7c282e932f0078ecf20f15981ddd4acf7e50c3a7627af32e016b306aa064c54e33ae493e0d5cca92e184141f57a715678a3e1ff375d837fd1424f37e2d606d796bef96bed0c01886ee96902527e3c7eee8744f46f9d4b2677054b7000c70425d93cb16b3af9167c4eb5d49c979a366f4f387d0a621969a2a45b8f8243dfb5ef5fec772dc62797c843d9bb275b19a9f047757e2c2d6740120d92c2e5e2f3360f8bb15661583dd6910e63641a826e666ba86abd020f06c63eb0b7504294916f871dbb4a1a4fa6358f0e0c34d7f569213","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"731e88edaffa707c0029a6b34fd23319"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
