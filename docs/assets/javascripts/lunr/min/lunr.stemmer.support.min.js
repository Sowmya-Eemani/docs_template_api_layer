<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"372572b00cce2e6caa5b5b7c7f2c1b224114a01f9c8ffb4edb88b684b785aa11dbf5878b326f98e7296ba04d45ce68c76e15f82d12c81f7c49b121134d2945bd5f9148b2fd28073f946071830e5e2b1053dd37136f9da6577b1c5bc2dff8edf964822b18a0b9b97ff6f1811f28c417855a93c6463b55655629c93c15688934ac3955a4e47beb3f4a0002a955b9b2ea402d57e441683ae978c1386fa7848f88515a940251f1835320adebaba962b8d4ffa4685b1b6b2f5b5c7aee92291ee22ca01dbc3f999359afc257efb4b8a0bdebc78df029b005d8061512f324c8bc5ac3b5c71dc4d6b6d0d7976f44ed703f61c32eaf92c69ab67fc6401503a492de4a8f75a8fcc8676be7e94a41978e910d8633a8a6240c4b8672fcb68ce06d3096b6a1dc945281afb4f74e2999597351c558fd18501a1106e0b5d47c8c91e855fada62d3e3f179b82d316e3cc86700339d36edcf7b91a7046887341fa711cb752317b52cfd56412a27bcfdf2959a5c291aaa2d5433abd1cb9b9af587e71990058d3b445cd235c1079333a3497f523e51ac50c3fb4a05fab766601077c5502ef8a1aee1c18ab02cb3ae7a3e5146bb4d07ba6712e8bce68e1b4ba3d1043d8b96e11e91396a415bc43f5ea6cc7fc9e2982096c25a232030afc0024405ac51fda8d005fb7dd0ba25dd9f453e3c83a9b4bba43d182feef349cc6454307d77597bb4e05f11840cb6ae4e1f163e719d114346b2a67e939742e79ff3e76f7e7e7666410974a153beda30aba8243e424f3fa069c0e612c0d1945b8d6634c09f3dfc1e41a28efb096ee51e06a48ba3b3653f9c2465ab86e0e059419a681aaea282bb824c75be5fa4c194312d770b07a6a71dc492c0ffbe57a2a3b289eaa81632639dcc9d7c88f998cbf22b667e1177569686d658a7dda9842d4549a6a44e1fdb8ada94fb26db13ff33a50daa177e22bff106ff11be25ba70f0d243964af2442bc5ac2a9bb97355214fd04e17a5425cbbd69ed602cdb30b1c77f76fc5700922777c9d610116dba4ce6b992615dedc2b3ecf62edeb74f40b2fc8f632c2b962d5604979fd1bb805d850e794bbeaa9d845ffc857694e01f743a639a2683dfd4561fec158f7262efa41707d57dbce7025eaefa56d1acd1eb9454b292d391ac7328d9e40ef62daabed4e203d09db61354b0efe61b4aa67a9b092ac9d873933d371234a9640bc26735337a887e7bb6e0937989d277dc37a916b0a47a63746d1163baea01dc0368394a2539d5247037076f3666ec383eb5b11216f5c5d36124332b66a0ce8baba98b331a6f12fc9ec77f46bbed9eef62749ca1e9e097c620ac48a976fdb847415577aa53e9ab82e73cee904fd6779fd8096b447ebfb395173180fff66db85be002c7d54f61bf2fdedaae56b8e3e4d1a8744518dd30d8742d81502cabf963cde087802dbc6c511dc067b200275572df0d08ea51bbfd2cc542e308b08654fb2eb3960a0d092c51229e8fda576ea0ecb59476e3c2b02c5b0f7850e93bf5bc18e14aa056d0e7ee2b96d72630dbd042e3c1bfd23baa75f7fc37b4b4a2ce5ee75cc1d29cd3418365c48968ea824bede12059874ed956ab086a7a30570b4e1ea24648341b113ff8940b8ba1d501ed124ae134fd3f5a3e21eb3914239a5b481be34aecd05855d95a9d4a533af441415b7eb6539d3b46bd1407592ced7077801cbb1556f941684eab0f809ced3d5e2190fc39edc6fd81d709f0637cef8896957d8aed52b4c30ced83a42f08897b7e88e662401e5c007f1d9c2ad304629268c549b6a08b1bb2def4dabcc25236fb8028b6748b3144c7a734b20398b2c77b0a6aa0e02206cdb0501a711024a72ec3f60fd90d66e79cd080d456ae32fa8d6ce2c75a3fd0f08df3031636b01abdcf51c1a23f6f47810556f9df20b19a842c0df93b30d4e485374340782b11e82325083f3e0252d3beda357a274720fc8d611556c9539c246f5a261b23ed3054f16d9e96bbbcff398df096b2443789c9e80c4f379a9fe3a746791e557ba2f0b4bae340dd73140f30f9a302f8ff64824f336ca15127472aad455ec4de42f736171344921fd79a899570da04475caf4753b4aa8839e65a7e26970a92b50103e08acc7314caf7fac257b8610b58c010048c67a5179f32a183ee66ac76ec2492b852a177a09e65f417a9c321d4987258da9cd11ab79f790a8bd83ba9678d350e8d148a472d1ed97a6dd323d9fd308ef98ecb3f379152290107210b7ea517f1c9a363b9b38a5c7a600c6e8cee5ed83601bd5b15de1504b42b8ab9f0996f09c2809ea2c0ddeed6192c729a02e59c40648613df8c0dfaba11dcac663ea4ce8f76ae3bf4c460a50ffaeff5ccfff14ef2d6ecb30717bffff2acf1d7b8f20ba5ac63a70173236f8762c72717663f2b4499d46bc8059e079bc2646e174e7518f67cfc13fdbfd24558ff6b60e5152c21dc0a2d207e8ce3041ebd2074d7a59d57ced5086f16556989074ff9c1490df867911d6852efaa1cbfce9e6972193feb53c380a55d6d4b78009f109c15973f7d0ce62f8e1bf825f3212b1c9199fc38b84b644f267598d485da17db4292468c4b2714dc0aef6a6de227f78ca554e42c0894415d3a3e3e5c34ce4d299a5c68005735189d9083079c72b6d66caa0c5d0d8e672d7121a661d7a4915eb35ef95d0e61cc42cf437b7025db4fcca47b8a5f923f7530f2481024565e38d4bd3f9858aee610ee80d31f6665d48e5f37badefdae10b78265246b0c66babb58d3a5471353c244fca806380a9bb95586787c1865855c22e113593882261e144b7d6ecbad97f84cf4ea00546452388646134bb906dbc0e4950863290e35a9284453b230b2232c57e1b2086ffda644cf757dbddc0e5e61ec6791081387285a9af3726023e557c3ed572bf9def1dd41d3a05ca728055d7166171a8022dfdbd8ea2c48b796c52c32724c373a12af001188cad5f33f8683aee7d6ebf58577905a5d9d226712a668b6e3322d9f79973440bc837da2fedb654a4051702241a9692346226fab2ab146137beab75e6184e8e22a62e4c0e0bd85445669181af7193b230f482ddeeba68ffdc5b2887c997ab98785d4cf6388214dd0a1a7961a1b683d0f54813e642ca3e49205427bdcc962307a643b3f883acb4fd29b8721a1d3d76369c84145d8b82da17a76205821d9990c17d9b194444e7d2f3d58e32448bd23cf90ac6ffeece4948ddfc36be4a52dca7bd613cc1f7222008adcd9ac5c2216a5a1e87498676356faa1c87761b453319037f681eb83cf42a30871c13696dd0e5233220d4b71ee84ed798bc1ffec4eca5bcc32933dd92dbfb98f57553d4044f10bcf47f4ff8260ce5bc18f2650f6bd3057060d23b922d9b1a84a467d5cfdc40cb415199c4c8f570d02f8999967697a59f402b559c68c9b465bd794d5f599f7ba48d5a9f27c72753525466b609a5969b39fcdd86b66fca18bff2df151a631836bc665f4059055527c0420c348423b1329ac7145d6257eb4587d8becfa8b2a83089ed45a7746ae5ccedd6d653b459152ff0ce48376ae4413c560593d252ab417702b05651f54fff171194238cd642dd331f96b90c5799932c86f1105d48eb236b0b5621889bf3afd381ac65de31b85a3c09821c60d4b335ed641aa2ffd91bf11722b9aa8049f2c4ea0f0ac399adeb271823de7ea596a563a9d6135d7c1d55d28047ed553fc6c10163121c6bfb19438713cf16939a3717b95f4b65ba027da0ccbb82423be05263b8a900a8cabbd2a6f31f21c568720ad9e2da1f29b21b4b337c5d6ea71f380e4c705bdad0dda88f6c08546cb55883b6ae5a799021435092972cbdd3e062f070c764d1eeb4a73e90c9f7da320127e8a869f2362b90cf42ff0b1cef1db4c8682a6143f71ffe453f6a298ab22b43f60d15ff497ab9f439ff5667f10151dc4715cfeab83a68b5f751cd5b15f2dd8237e80095429eea5d2b1055d6904cac0a8bf4c35b29c1d407936238b7da6e55a8141352159907db7e887ea9a5eeecf42ccb1eed85bf2784322b2d485ca6de2ac13b21d21ff727de160cae02492ccc4d97819b6fe8ff6ea4b0781ae7150270598c14c92ec9a7a10bb609a0d4255ce35b0624aa88cf1e2a1fdcc97404566eb346e9c29260ab61e0f13e4a8d1708ad28bf4d66885558dfcd9f5c19550ce7cf511d2ba42a107bdc19595ed303d24d11d47681ae8a5ce36f1d85d1155f0426089deacc0729f571fe966c97791bdae2430da7c537202989b3af80a8269dd9377acf4251fbf04ba355684cc4ecc7edbfdf682ac79a23e3d1f4a30ae795fe7c7365cc828b3444c0e0672beb9a2db4ea167a64924144767d2f01436652231814fbcdc0b8600370406bcb88f877d765aaf3b8dc7e785cefa0dda1baf73835b4a5eeb37977f1e5f53f93598d232276af929096855827ffc8f1deb5d393485f86070f3add8272f6b526eabe487b84cf3caab0820020afdbab70edb2a93d70488f711a56cdee4b4a303f11e38d64e2dc3088493c2d3056f3d8b68326eb99aff2e2b9744543b7a243303a6557d2125ab05a298ad14e5a0a137f9358f206dbec51f56c150409fc24c0d5007f5cd9c91bf5648dc353b90d296ba04a54db11af4d893c97fa89eb648087e71f769afe788cd40d69e664936eb64c2f5c61fa6c009b40bd8af1a2994a8b4669fc10709ca2d44b60905cfd9c54acca1fc6e4ba0a75c9883fd4ee9f4c29548c81ddf02df0759d90b026f36cff7228037f63f7a80cee1715d994a920d5b24019a4e221a0987f51fc579b76306adf2df4cd95d83c42b862773ce36c22af1bc120aaa25fc653b64203b52785ae3af0680e55a1d6c6a10941ef2db3f88eff67e0ce1ec0f70851f86d6678db1ba603003bd069c705c8395c6195e710fb45d36ae781c9896de7fc8ad1f357d4ccd7d27855ea44904d2608db34aae385dc27af611f6d32a4200176c7418017cabbc7a7ff768c6790a9406eecd4918c5993a0ad3cd39ef44f4f27af08d536ea05d7bca6dce6526a92246a92c1128d137fc176201f3f61f34bfc939a83c8026a3e1444173a812ed41b3dd61a164f2c3b539285b4b91486c14750c2114888c08704a63f16e38d60eb2ed16361b93941b8e468b99bcbcf76545bec04e8604c5d8f8caf5589a23794fe9ace5f8a7ab9d5436cd2288d481564cc3dda2800719830b1d0bb2a1f6f0fba05236c88a0f0bb9e15b1c1de16d9c6df","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"731e88edaffa707c0029a6b34fd23319"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
