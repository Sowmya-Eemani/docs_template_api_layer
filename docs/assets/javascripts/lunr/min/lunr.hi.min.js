<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"19683612a731f615912588bb4094c14c73097888b914610fda99aaa413d23ef7bcdda7de9dff72ff6162184097a023d3db4ec53f5afc8638b6e0314d673ccf1dbbbebdb3ad2902850b13ee07382205e09114f2b63bd5d46af5fee2238808442e959b7dcd95e9ca094ace2daa0a2674794b0f5dc1d1a77e82389b007f46fbebcc4f5fd6d57773446378d41b4d45504a8940dda01a5a2c00f9d0327b32d4f3580df80b59a4272ffd5c0c599400a6ab466a37b5262fa94723b750688eb40a415aa64d52cb831a417c77429fca3bcc80906e5d7416c32cc077c00c624b14661976ff50a74d8a9db33b7540d3536ae0f74111c234bc50d1f57eaf431b0fc20b5cf1cd870f47f0322cdac29c442fe9caef37b880a06c62b460b4b1e5da1c7302d50fb1e80d3cf024dba9f5dad354206abda19f2c66cb4c3422ccc23256234eb716821355fe6a97bc70a01cb54710f86cdc80ba287f5e234a9f64b6948e33ae80ad9e57243433e395c13073336e10c2ddffa6cc021ba800108123a995013f466396b27a65493041688913d0e115620fb7c080b09e5a029eefa2f283e090dcf5d629148a167350f8fb9a521981ec7602b1d855a0a43f3dd8e76255b590ab42a9b12f46eb1e324d86b8b93d8fc2fc1faf80af5bb19c42baee042ffe3450c854f7bbdaf0990ab5f3cc0171f2703e9f11590fc360663a1e521659b6097841e5460c38bf1f8edab8aaf639b547ebecde90c8d692c9e1b2ab85be226e5e59914c8f29681d7cba6e060f6a735933b72ed16b31d06c15a6bdba6884c5c321d5b497a6da3d0bf2a5e60fad7f58d4fba4dea3eb2dcb29707f1fbe4a7fd1181f787ee740cfd152069948a6ca8dae786fa9f96ca56cd0beb38adaadd4e7180a7511698e16b2f8085865cda6c2bc909bd1666e382884ca90b77846810f12db439e66ef0f79f7518e2fcbcdc31dfd009b7cbbb42868f76f7e065c800e9a0e2ae00fc85df9ed45e4579c1539db5ef61a2e259effc67a52d2efb337cf194ce1baad50ad29157c08303c6c0d04a73640766f86f45f775bfbcccfc0d546e41302938e1d6c8833b10fb1477c81a9bbd8e093c8f21c85b82fcfdfc3608c47d7e29c98773baa709cdf8f8432e4d6ef2f473131d61dc0266921cd984e7faf0f032f4a9383f8e4c8ff8aeecb75aebe22b6a12490bb4c5b3ac2b819533dd3b5f5ba004a352c274a9546253b4d1bd5e269a39cdcf19d18dbd628f57daac3084f3dcd95812a7429acc5cc911af8143f2432f3bbedb6df4fc394046556d03efc14fd5e6f32fd546a58427c7889f54bb8572a1e40849093b185518cf76d201bd002bcae0388eec6e65a6effed5496ece09ceba9703d9c2c19c6568730bd4c745e6120621c26ae4de6b6aec0485fa3fe57452b3d40894c894b04a1be27da528e2a96ae93b30174ff229436672bc874d6e153f3438a3fc63cb43a11ea5cad03ed4b5e271acc5d29f2deefccab362225290ec69b22a54581b992570cf74b09f951ef9c6d7e5c332ba20296dc2fe4d392624192bf7437b0ad1dddb65a5c657823671a5a8552c599961b6ad7e031a243e73ab6c9a25e1c14ef49f025c3ee5a28fba2f24755592380aa6b3ac797506d8b8c2aecc928775b8e2b0aa382ec079ce51043149b708a4b6076aaf241cddfdb1af2553560123eb94377b615e1e918762737bcf72983ab4e5665759e2c4ca58f1254bc2ffbea5414696164ca35f62bb10c9be9a41054092277d1d7ff3dd99dec535e241b90041e7cdc9358d4896d6db280f13217801ec8ce493d5b85e22534f1d56cdd2debdd2dcb6b5aaf91d48d8705f36a76c4398f0a9f69bbb2d6532c5d1d9e45663c6084c386297d4cc92efcf39d4345cc7d0bf56f3f949f56e20e793fd5fc24e885490926af67f1d2e5baa819f408b7dd25a916835805e315f931cedcc77cac4c0e634137a3974937b36be90b0c80829aad96d774bbb4aefb4c9219c1421ae2d9d4376b219df3197a638bde8d3468b304969f152e9e42aa8f856264ae6070185da6801c1a31038e3a5153d549431a6f3dbbc5770bdbdc37410ec8f7ecc1e0149cb20331de02de63bbd4d008d41fbe163c999de06c5443dcd606d153bb208b49175007376cdd008cfd82b070bdbda482f4273d6f563b8d497a10b5e0510e4647bc09b71a5c979ff6928c143fde7408e9df4a6a044abe7fbd28aed505668b3a80c2a382958d184bd667d762cc699da37a7a82f053dac0df1d3731eb4e0c5b0026c8a48c3b077dfdc0f4e8892dd344f0199e5a8e67e1f75a129559a9653e2c7c2e290121db74d96135279bf2d690495bbd6bd22213935bab0db21effe580eea3405c205bbc83194cd486720c941c2659f05e5d3cd225ec17014d372d8ba492814f03bb8641d3c1201bec7c57ffd76113605155b7fd107baa343891d0bab744bf8d213ab3a83e91951495b247f8915e066d38b6f482fd1a8c467a8b50ae159311738f21f476e7adafed7bd8af642abe5bbde4ffeb8b2c7af6b76e0e9a0312c9c9e76e08fcc51bb5ed4e93f58d24aa2b21a602e98d738cad0645f3f93f88fda1689965fcad8aad48b9f1bcd71275a8cc7b541e44dffc5e3a40b59b2e126b63652b6271f53e95b0706b09161d309680296c249ab2ea5b9d1380e59667d4979d73e2281181e47401b02f5b08355803cdd9e9057553fa8034f830fd1e6607642a296a6f427ddb2c9a2c278deedb646f0243f99af70f83059bf691055f3d4611f1fc6e2f88c77addcdae10ea61ad2da8d99b60d33783a2a8bb0582dc7c430270651a8762f21d3c79634690bad387392baac30b908419ba6f812f4fc7c71b543239a577bb0abbf23ef546c5ad0d0b3357777891ceee555a2a89aac2d5b74df63420173a6f663c141a194c70d7b0f9d027f98121640cd225494b06e58c02a0a6e17a1749cecb0665c36f234104e936784b8d1ed6b88d394138b8f864b3586fadea8ae9e99ce53e3b46325224534f20ee36342a83784b648a37de5ec5c4eb33cfd290327f5df1f4f01a6056fd2b59257b53fae305f0bfa6d797df901a984b323d2e23249a889506392877bd9d4e62c5c3e001b5a1922ca57e030e5c1eba5c103b8643e6a6cb1540b6592f55458ea6ae80c36e24f178e0fe23856dadac7f2792a43cbb509323817b8aabce79cca8badba84c859a7b6da99989adbfea3fd3a1a11b28fddad5bd4de758ebce83186c558067c7d7cb1afa5d3069db86e5d9be57f69df0889553d85d4556dc4eaf4da8a6d8f8a6bc058ad09407c110976e0de3b0c846568326a742fe033e4f1598b5346b15bba7afdc320733275e09471f3febab2c8cb6669d8adba767753621b8b73638550575307427730be6a7428b862d1707f7cc0979cace705cfd171d012eee06cf3f8f4ecc5d8d0528b8bd34c9290e0487e54e5f5c1ab05daecc521bb8de9bdd4782d04809f771b1dd3b4e8cb343043deff6f27d9f10a9dfb17819795458d350b63958325b2c4e112edf950c511eeeeb282c9525ba854023efd68f4b2a1f6915347a94d102ab816ab9d8641a4c48e7860233c009401fea35a858d6a73507dad426a9a1c9f4065715d5fe50a3ed6e9d92676a9888e8ad993a31ab92928f5379724e5fd9d89ff8649cd839d0e9ebe91931ae3b143492dd6a292608756306913b36ce8b02ce7822ce271db86f48e765d847a831a3703dd1bcb2b09ea40c61c111001f10056f861be32508503ca60e7e1fe7ff8608d024bb4dfb4214f54ef6a46ed93a2b9fcc8942cc0fb9e7912e5885a39b28d6822cdb379d3bb4f92e7485ecd6c867e298165c4a0e12abdabeadcfefcfe60cce97f7233726fab16f2a9657ab5cb3cef686882c0c509214001683145926e5b0a1ec183e8f9130fe77440169dea347b7986d866cb5b4f5410027cff5013b0fdc22b039787597dc04a728455f3c2e6ec7d02a268618b3ca998bb2f79df81e4bf924a72c5a7f34a66bba87799f5ee54020c8506fb3a7e47943b0beaf4f7f16f11dbcc7c1145423799a618e10606370dd97c0a41d24f1ec2eea6e341ee23fc0d901853d52fb8703d3889075c152a7e06b9ab9b47fab00370c62c483b02e7540eeebcddce6c8a4c968944457905581714de7571f7ef1e046a10bfdd9725f44d7a2635f2b2b89a917290cea7d314140a5f2b6467ee10f17ac783d094d0203edf32408c696c6a9722e7b056b36436fbf0aa5ee495bdd2ad6412174a838798322d98ed991f638989ccdc2c88359b6101b2c624718c7f7aef4ca773af068a2244e0317efd12bc0126d8606d2106e754f2a795de16031e6b967811d3ba9d26926664a31badfa4040a8007c064ccfb1dd6c4cf72d2d77edb05d08c462ca9876e27b5f0bc5ff34ccd6496e831c9a17ba4f7b44ff36fc0ba29186a58f6eaf04e160709c63bed029ed9f4f96de330c65bb9bca5611aa4cc9dc54b53bb40a7bc6cae0ba42117ee668f7742f1e50b5a6422373b69ae26d2b2b0f5d0d4083e6b1f01dcad3ee814d4dbd8aaa732c635e126c366b1f294325628e1d383c774ca4c266a46ee731cfa1e41ae09c778315edec5ae7bd05caff535b4c65cf82c72710da7f7c05004f3e009186ccfdb1a82f444500e798b756540d6545e64b960a3218d8c6cd8143db524f3a66e133d5531838fd7b3fccf0607121654f43fa4e726669a4389f906fe23290bc3635018099e4ac679302bdb8695d6e6bbb479344353163994b4d2590825871ceb4d3132ed35a520def7652dedcf77fdc23a406a2305e94dbdca3bbe9cea459b45d108c340ef9dc383838553644742e71cb42e684f7c7f0d0147f0b9ecbe325adcc8a573f3a2079afc3a5fe51ccff80ea40d2f2931b403ae8028","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"731e88edaffa707c0029a6b34fd23319"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
