<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"27852044b8f2c8d39c3a67f3e1fc8a5de392aa2f7684ccaea7a5c37281178126d2b4f470b7988995519890c242ebe209b41759f890d3b0c49bb1c28f2713c94a46051906c1f69db8a4041e1905eb08acb1535b3e35c595a479901951462342983b8059d3e8b5e2e8d2ef05798ae5636eeab085f1c369532ebb3f6c76367eaad339b5a222dc06652434310507f5b96bb60ed1cea04a77d0ebf65be3122713b2561507c3cf5dea45f378c10adfb178662b244b0dae31c7b59614c3c50064fcc35d7d2e20409ae0043d7251a6fa14e90c0fd7d35e136001406ae8f601a9fbe1ceb77f6c22244295b94ab87aaadc32be215cb1c377896a8b8049606285629289511c9be6cbbfbf6167cfd434858369a4f99bd4fe557569ff5cc652d62103f818cb09a63a8b2ae69248202bfa9c91fcf4209ccc754d7ec82bc8c749992230ffd57491f0491995d446947f53da7c897715055469bf88e3e39bfaf4d5b3b7887682cf8bc80101ff752dc310abc3e2689dc64219703904142e398555cef68413f101ebb4401e7db633cd4d3dc49f6617ff7685d6d90bbb38eb309a39c0fe8bb371daf6be901051f89fcca75aa133e9b82186327f9d58b747b6ed69306fe0e0873172781f3ad01fe211bb989c40c987a5e314192caa1e62848207bda381d1bc7e6e9e42d6926bc4bab3c21118cb1b3e71f024534b0b30996bf6ce088355e2e500e87d5308c5bb15dcb3d1d503ec474eb31cf6ff20f14a8bcb225d3eea6d0b2c0a9633a1ce5bd94470709a0572844827153834ac1faf4fd705f12acc6688126d7842a3ca668fa275c11f6a35de9ac269e9ed3b491ed47e9efac47909d785d41f8d13a28f64c663e0b6bf48a3b4bbfdf5a11df7b7fb73dad77b350b81f00417d0dd67ac6a3652244bb57d12a462c68b12efd244cc518b74d8ae33c394fd7f0ab4907a1d7358467229b26244620172cd874cbf4d5d2d9c3e72bd486864edb8955f813a5aab7bb762c25830ce6ebfb30660793725bdae3edf1524df96c7f73c83be1cc84b415665fa0bcf854379cab59c37f9616357550c0572146c3c0ec79582da9f090e7ee32663c54ee5fd2d6f8ecba3a7477cb85d15543ab0daa48657d2970c027aa25e5e06d6536763ddc349d591ed61fe64dbe56ddd28fcfbbfb3db37fd9cc2ae24fbb6513d1f07093b55aee4e3b3ff42fcbf35d57513aa4dab14468dd76ab341db8a424617eb92f22410467cecd1ce294d44eae424b733907ece6dfa00265e5c85d7c3252b9e3ad897c1c42f29706a9790bb147496cc6337b8f16ce025f9970fb02e1505caceff43a1a0c08652ac0da115396626d2b0c68a5d6bd632885182154ccb5323d5dcc89f06e4cf4246782c8bf7ee3a6726bd76b584585e241d5fa13c263834a8a7745ad94b2e077a254bbd8268fe096e33292339618fc9a5dfc129330f962ed5ba58f4c849066afa51c38276de6d312a7d70eb920ce6fceb117df656921f832907b943069dc4868ac09959ce907947e0ecf60a78be3d79f55a151d23312b134fcba8714eacc2aa9ca2d3054cb3137c4d0f0bf72be18ead5e1559eec095a614d59603c4ab48df1d8d713322d4ab1e642cf9096aee8502a1e292f83b88d5fa02d0d8f89c164a483d780e800e2ade47605ea59d2853f4b57219179343387957d9f944e4450e103d7db739528898cad2a76bf542e039151f08190c0a7395ee27271fcff6af343d5c27a236a44fa421b13b705b24f70ff6fed30b06ac8a84e76d5ecc3b8ea924f2570837f43892dab8cf251689a67d639cbab7683c3d6a4ee775507530c12ab910d75dd995bb2ca2407036d2a321f1342ae63b0d394ba2d50042c574b93cf44c826344cb58687e9a016f4e97cbdecbf88ae3d270fe64c291964ac19423fbf64a8ea322770d6385e65ebb4839e445634406a54aecd193f3240edf8b9f791a1db9a46e8d026eb9047b84dc31dd1426b293eafd9851b452dacf746802a534216d0e4c711ef9ff4d6fb93ce20206e2752657717d0bbe0574baaab8bd82e96c91a2d61b89e343bd53ac097b4400acfdb575cd63b40cc83eac367a8d1706e07d883df345be24fc39db54b4c8e0ad0d45db44a47f73dd0611b7120b348fce54b424e28c5ef4cab1fdd0ffe7d68ea73529b32805856ff43b1e206ce34e7941a38307d12d53265603a6a07f1fbe72f76c02674d0140c3ac0fcde98a78d9a70079dd0b1e125ca99c08a5ef7d298b224aa16c0ddf31ee6987b4c78f600766f60322d0f36387e6fb85724f00238fbff49ae812e1f4290ee8de111590139c860e4d17c358f4827b3a5ca44ae7ba8ae095a7acdcc688fe59905bb7a802b3f01b6363d04172e1e3e80acd38b8973b8ff30927af1c286285caf5bed276a438cf35aa4dfca3c5310cd1ec397015db3236c28c48621c837b1be66493449e877534e594ca786d01acdf7eed17a1c1d85000a13b268c81c15f0fde3935ffc37802e9f4b63d5799d1fe0863008ebee732559016c3fd81ea75b399988d28e67e95b028c0f737fcc206a7830f79ce3329fe28c7a2b5e99d0144e740ba17902a8981b880393d448783601210b4aa18a9a014ba88f56f8e9c3e6c27bc8f1c88de900c13b00bc7462c07217e9dc29686c07c1a8e1a85e425b7975130e289dfab0adb85abe1b7ffa556d7bdf38cfd62b4891c75ada6ea4b5cba572a067f645d497e0c3635767782ae437c2851076fd6dfddd0a896cb9581ea48be01c29203faed926fb6d4bcf27964c35151ab30321c3833648f25a203941434683b5cb68db06b0aa68bc0c60331cd3a2b198249e5728889ae0e6aa9b715798d3414663a5e27deebc26d75a91795055195fdeed1afc8f5d3b5d48b2348cce8de4c0a9494d4d35cd39e5d386904641bf506a17fd51ccbdaa04c65f325e39dff5b3cbd4f02ffad00db13a4b29a34f067b5d3a16ea9439d2ef2b0bcdb834883a26b5eb30c55c45b44101900cc889f548c93a909c019f7652b2b4b8b8b118ebf6915be908ae5420cda281725362949768336e0d1c35f060f6eb5293bf2bcdad1e0f6bfe92174e94334787cee6dc7f4b097cae72ecc34364d6392ac8a9cb6bc04bacee98465c2dae96299a5ca2051183abff655a45f307dd4d2b11a6b6ddb11a6f0550049b7cf6f56b832b85b94bcc4bbe496c8f803e6899f46650b2b87553eacd8f50f7e23138eebc108d3e435a070aff59bee784b7c1e33a1dc04c530e161f98da18c16ff3f8b54056a8989ff7039f96cbdda9b2df5a8c2b02be0d93010d16c0e568de8797f21361d000a056c2a25cf29928a7ac792fc0988355ce4a88782a1ab8bee6db78986649dc8c8603d71f4fb2107f40b6ef81dfed1561e82f1baabbcadd1d98bbd9802c03f35913ae6556d24c79f586a065beef6ed5983cdcf896751534549c3368ed6c72842b4bd58e38e0cd179286fe8d0c3682ab551adc9e00a472eb3be4ae27197d3ec4659d23752f49ce46d8a8d17c18044ad6e8f1da0bc3bb4453b5f8d560eb6583db5e98dacf0e8baca20308b24a487f334e7f60cd694dd146203fc4892c37fad2ad91a43f3d673a3368ddb374b330360168cb73548ecfceeca47cd0f0a45744619632ebf902be5a065a833c7727643e3fc83cc2d047df17797d4943b6caffce800c5f852ffa2205536cfc5bf4269d424b5ed324890b4a96fa7ed5de7e8b98d726a2c0b3914f8caa763ff2eb32ac789bd8025f88fb36f4009c11f81eef9975a3db9f19485e7d79c955123dc62ddbcec0fae067ffca95e4dc81d038c4970d38451fb2d2fab3f6a0888dcfb36f7e238bee2a8cc73f81eb001ca325cd7918d8ad6a589ea3994d6368c931ce568c72d8bc71dbcc3581ed6f50b24ed2cb8746dcb4dff0e8fd08d06a581d2aebe0de5ab488f1c3e283c3f857502638e03e756970c91e46de65b5719620c6f329c20554fab59e0b7ae26ed1db86db6a8769baac99e367b213ee88c1fa69c4f2e18e1ff55ddea3020f452401dd34c6ed7aa16dae62e90f1131c95ed647679d0b0369837e228891eff9025bd710b5ad54881383387596323460a63336e8ff003baeed2f6e44d40b7a528d46c2015f0184a33ad1278e2a741f07d98d8c0c686cf38f65096bf63b856a9f67e3efca06fafddd30a23ab74321f9c6b6a8163687b46acd846ef096605857875407766d8b1513715b9e4770fdd4921d5aa679de7fa839899b7fe7c66c26f6ce82cda119c7d4be33c7eff789ea28d7531afbfde9b7ecb88520a735c637001fc6ee636bf2efdbf2f52c42f4634395917109665ba15396e84725328e8897b15fd49f5a3c417a5695dd943873924020581922a22283b8369caeafc0bc6d4fed00c7deadcdecbca14f9bdcd7e9741ac4acb5db7001330ae90567c59b05f5a58871307bb5ed12528c367cad9e5ab1bc0c7c8d85e30bf88b9252a1de0efee861c3fe5ed8b459aa69b80c120820067c31c9698b1c9d7c39e843ed5d9f7c0172a3d76b2c5042e275e2f38748cd273db9c59fe0f787f767a1d8f4b776b1ba25c57b7390f037a5d61ad1f29a4dd3385068f6d9853d5024470ef7b5aae1b96ca52806d73c5442ac4df81048caf43f37c4a589507972d0c21f36e37f0a9627ce4849f05945e35c2f4ec5ec0ae762030f0fa3e610615427284c10a4b5e64438bcd1fd94c25cf002341c818a28ef2f3e74fea608bafd32842196c349fda833a74d7d86ea28d82ecb655d5d05f9c4560c865735d0147705145ddb0fb57e8c455084e7a02823ceb6ed05cf03a468500410a16b0616383b1f78a4b09873f786848abeb54a7d89b25c3f0d0aee97b235ec45f3d06e2b715b47dacf780646d213ca44392351a69f02f8c6f1fd33965dc1c","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"731e88edaffa707c0029a6b34fd23319"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
