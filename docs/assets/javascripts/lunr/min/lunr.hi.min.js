<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"f784581938347765d7ec535a6a6092d8bb859cf04b1a8b3fc03626554adeed8fd6074acfc68a78f4daf281ed64f9adf8537adda107275167655bc0e41b4ead2434b4fada692ef6f5939eb9bcfe93fc15565b3ef2e9491dc912c2aa8dbad84b7079fa9d1871f2ebecc47ccd85c6348d92977d397be5bd5f5f877c02b0fc02090947e7399cf7128273a2edd0c045a60c459918d9550c00585034a30a1c6e0797bd92776e08339e0b76bafa1600b0b16e2e18f9f711fb7c689d42509c8c0b85f37946bdd6ee8ee613844e073a3e0308f3371c0f803927a1790d079b8f41753beaf6858e699e394bae24d744883dd6f1b15dbc0f3ddb9e9ffa9bb565146d5b5466fea79c75aaa6f6261a0072de9bc48ffabe9eedb01982ecf158202311ea39f447f20d2199b250fb7c7f79e1b6f951824d1d58fab72365d814cd977ae9e9adebeb8b832a522d698ac5aa1d226f63c9370493a94c020381b37b5ca7ca2b5264363461e18d9686a761ab9e7cbd4c774a0a08f58560076e76e3253e1f267d275deaec5d2d4dd6722a03ac2e8247a046ac0fa2f5c57bb0f3191b634ed5af814dc750b16393390e4c165d5c96f61cbfdef9eb48fd4372c627ca1b183212017b4b7b9fdb306cfe836641f2491e7298323ab3538ef31275ebaba22f9cc7646e2e0ca4e7155a9ad65ed143673bb2db291afdf9c31fe8f7456e5c280dfcf40403c47fa68f95cb2611a53cacd12f5a2424980de7b25669a15a56f0b2eb6bbaf496f680f05ae5b7935f9cacdce06cefa91cdc632608bbee7c66ac6f367fb6283c876342dc39aa0af46ef6c8e16238f6990a2004c7efafcc752745493792a8e67ed253e9e821ee182a83166c9146ac208c884ceeff23e414c088b0dd7942e5e9f2339238e0a8359e8c2e6ed4f6d9b3019fb7663cd633c3e19cd7504c57ff7f0c97ad34a5bb198ba0837f29de16eac91992e6fdcf01aefac1be36a0a77b715c7a1a672d9cdce85cb04be9dc6abf1557eb9c8b8256a7f4baac57a3c6934b652c135bddca6c2f987d78ea270a14e1221bfb318dd699a34e9a5b76a84c2b3cdd4f53b623d14b47204a6fd56653cd3d79392e7c8164dffcf096fb5259ad5181729f34a2fa545c35dee0eb202955db2be2aa6a0fad6d150223b8c8c79dcf2c57a60ae324ca18d1dbd8b8f3674b7cc5de06c7bb6a4066ea6489a842c33f9f51742b1917dd02ac5f85ddf874556d0390c5cb1ddd6a3ec56a2ad8c27cd26fadd31a35ec46626f84a9ea7f7b3c38068ac576ea5bfc344be5ad743c2bbe21ce9f91e64b6c5d41fc619b5bc4d27c10460e07c7c275015e739567461a2c8dd6f00c7cb1126037c83f7bef36bd3688cb56d07e5eaa40df371a6635fbfc13f0db9803762add7ce9b7567ac75572da31be2dd79149f3b5144f66b12011c583cf99a4980318f1d27a85719f8be3ae62fb03e6ee8e0e79747ad7e59652125cd2d43a0caf449b3b7f34c18226193c7050978342c60d1670a98ea76194e7f7e47e72d6ac4cc5d0bf7856eb7a57c19cc944b8904b0440b6e8c3b7a64a7990647d08e7794d97089cd01b10b8c1515dcadfbd8ba2e440e04cb02f9886bbecd56982ed82cccc4a8edc4c3cc74a1b88f9cc491d734e9c17e0823a275fd9bca6d4f068559547de3b5aecd87c875855459079bc4800e576c9d67f79fc3effd268dfe3a586c70f994b351f7450a5a30675a96425e20ef1306a0e0040d5842ff5db1e520b28a80612172eb34cd0ca7ba8b1d877a5d905795c5bf6275ac6f1fbfbdeb11bfa546f837bf100d1ad5fedd3265080d4123fbf91f632a5b5804eb375e14eadbc4728d7201ee376596f808cf359521e5565568d1dbcaebf498c0908ca8ce086c23ab6ea1361648c38a8b3737db0c6040b1797cfb105b7cfd8073e5cb62fbed2f0fdc3f5fdbb22a1b94f20faa96b1de25c0aca2b0b1d31f84e75f1cfc8a21540fdda4685747eebd417da3e76db821721caac12f13ed069600025a8fd679e7376c43fecb9323f9991c760b9e71f9b1369f453afdaebac3e50e6944b26d0ccd2080846e6b5e338ad07f73063257cdf89db8ac5bebc5f7918417da3b788e92100788550f0010807f5ae8b577a7ab2a2b625c533c604359c510f40a0b6bc1547b01aca660a0deb8e84684fab6b601af2809b681208b34aa175a4c3f9c3953cccebf19e96659ac0b3e106f8746bc3fbad422b0c11f755d499cae1b249c3398a14a2ca1ee00f3360d9c7022c25151bf850ac68beba4dc73f3388756eb769990dd1e3150566372a779217bade852ce4f9ca0285f2ab540927fcd4775a8b43619f0d229935461f964bfb08f02576c3e855a0f6e38cf458ef6974a6882d33a7c2213a3a025a3b1fb31733357828b5d611486da38a6c7677bc689c78ef06fcc579024304fc44d61e546b51075a136373d58756cb68b674213cf80d9020f6d71cf011fae007f394261eb876fa6eab67188fb8881c4e15cf705bcf6043e8b2b65d5d524354e720dd95739fabfaf1027b297a96477c2d50f366118cc9448535a5b1c9885ed5ac4eddea0e978a17f1f0e12bd0f5f1e23f2dd2e9da7659870845bce5622c02124a064bc2ee93d9c79c356ab4f3a20c1003c2f6bc8fb06a36ddf3d110ed6f74d63416f5f327576d12243eb3b821c390e94db259e64c701eca5a906e1a54863c16f975839f4b49de87da2773ffd8694d8c8e91263defa43847579f4b75be14f2933e00efe25372879121dacec2d96af600d5bc33ddc18ee5aba8d4b5f4c256994f6332ebbc4d82646e5ad3e523514a66d838aa93fa8e493648d46ce8a21e1167d2208369efddd5800fe02a8ca5a76f00fbd352bebd82d58c7c4fb0bb1f680a400a9dd2eee016f67f53dcaeedbd2169318f4b1356a9665f81abdee2e1b07ac61734e510acc126bd15ea4f541bafc97a515041b7b93954c58e18886fa0bedbde58029f5c0066c5fb98495c4491003c025726d6b3066840c553581e9cb57cd50f86179d3be8f71d9b66c0da54b97b9bdee9f4e5389795839486c8fd1d5a4e9e3f14711e2a50db020fb58d223602425a164f9334d66ad6e08dbbf6ab747d1f11a367752b189c82c7bbbd5595e354946dff11683f1c7fbcfbc0878a18d310a2c3fe0952283f7c9f9324beb3fb793d4f1e6fe2998b12ee68e9f8d42cff4c51aa50de2b89d423fe826833701839f4072633d26e574b8c5ef690f9503880c6d88a3c74b3b77bb09421a592c8f8e30ffd0e429fe62b7d85e1ac4e1797bd47491d2e49bfdb520d4b6dba96273645fcd21e4c03bb4e7fd887b49ea831c9b57c535e61be993be6bf91aa7e202b5c86ea6292c373bdd12cad540ce4a4b4ae2b2199cc476866faafdc32467d15036293d82a8c0ec17b8e3ee4fd421c765f3af1ab9b9d6a2e38b4e089fd72f1692e2821982d405f8a4565567bb2bc8fe5995033c4e065a871d63df1be1b4dc1a44f0cb6ae12fa684bc1da8867d6ebe0985b69638c9bbb4171c893b0e357478f644977d3b51db8e728ba256429e5f5072989016e89770bc89337161889019d420fa7fdb8d171827db139de5441f2ed587e1fe8ca9d82eb45dc415b5aaca7b5a618d50af19042a3b885f21f4adb8081f907f0979c7cb39154e4089b8dc5d3351155a31623da437f5175289b20bb492304914823389c2ef908f41787ecb4d7f4454d0b78a8bd6f4113da429d2dfdb028a08e836edaafe5460bf250062a67b38506ee5b4117a0583fb99f1fe4f0f1e8235bf45e0c2831160e4aca7cea2d49214be78554c7088233fcfcfde71c3467f12872d40a6b3b8b927c0b25333c6b7cbe8ee969d6b91626a7dc7ffa85d7b755c49e3c6b102f5156f381ed3721f2149643e695b22bb2925b440154e7a1ed2072f4850790e23888f0531f31582eace6b4e910a85a52977f9a6563df4bec8bcae298254b24071a344f6aeef66f9554cb88814fcf7fb6db5a764c6c13c27b6811cc42786d2b0b6bb87ef5cf262792244bba9396dbc2fa7eff1883d8dbdae6f98a0f96b23d4e60f13eb0b55a51a2191665862d1863cc47bcba9a66ce9d6712c12c2dccd8c41909651050191acf9c91ef71f0420b2f03fe919b70a66383c67ed4cbeb1a7dd6595c32910ae20a47e9031b4c5a2516bdc7693f9610f1e77bf0dbd47af9a7f8e82306c2214bbc2bd0af6d2edd652dcbc105ffbb9ae034f7aca9c0544ddb31bcf642dc613ec667afa9abe05789d8fcd18d130a48f9b3b8dd1b3712b74c8b0f1404444dc0d3e961b0224586bf13515c8d5cc26f97fad6522b5e5812cf427fee297db9c3c3863f7586fb2afd389b9eb8c07cd6572d0d6434826d9e3d99fd902f4fcd6a285c00acdae000c593cb29e4a09321cf5c6f8e294683dec5db918795e9b8d2a0e920e54a55e6588cd77260e2a3b91aeee7acc3d84d58c51e817a877c467ac07509fb3d996296b1eda2b5c87568d735053575f461c05328f116c15e2eec376b5c7b51242cca9b7a9d5c5b21b69821fdc2811975976c12cac217c4dd027234cb5945199ca941fb77be8ab00fbc49d12a832c589147c2c7687f256442327e8755e2c4daa70f0c138dab9360ec2fe513be11debb96a56277debdf83a9fe4d8f63c947c3997fe7ed24cd15a82483e22198bd6f0c277627124287f5c8fc70d93e35ae18b9fb07fde9aad82a7b8484bf87a42abfbbfa1d4d57d1bf421dd0e38dca47554c10fd68a8ac57bb89422f84b1543b20198815ca70ce731cfeffb8b93fbd862d9e392dc1f8978b432e30dc96931dbc590bd28cf8ab90d2c119b6d35125515524d63aa2bc159bacefe2936c61af389785ed590539a6dc85eab0ba7b2b338ae63b5ae22f667e7badf88b0c730663b80ccbd","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"731e88edaffa707c0029a6b34fd23319"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
