<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"c17c31d9983ea2cf9f6d6161495be9afe9904802fd31c121341f2e3e83e2a061d7f7fd57402fa64c9e505264462ff7e0fc9c8d74e5572b22f5920a017d898b759627a876e4417b2efdc1aa1d5796d9fb48db5078fea72d4f41e44f7aed445136ba739953a233e6639f4739dad890387eb0905c29644091e102b5554cbc918447e7f771d8a915b95adc3987d9364b50a55d5b3c0cd46f9f536784c7eb9f0e0899ee64012a6d3bf9ef22084e9ffb5abeeadabcd8719c16ca4716c203d7e1406e63da496d6e3f88a2bd7a9951970fb2e5653951ed2b4668f875e39c57d89edc41d0cc1a2ecb90c2ad1732463b87509f25dad64fbc3398c50f45d08049082e02fed8877a261dd4f7473436287776efbeeac0acc8799a9a00b7b2178e6352951828d0583f8fc317035baad4b715290604cafb4b547123d646aeffe1dfd6bb9bdfdb9c38b9c7e4e301002e04253c08c7f44ae43b06390a7a0d0ae2df83d4ca9c6fe6313d5b574802652b328f3507879ded9907dc0132b0c823cb7109cec949f3a51e642c60c04bdfa95864c6d9b89d6c70abbb2287ab459fd8512c3cb90c175b1f364fa06e7979992b72fcfa83f521f6b8258c01f07af822a3851c5dbc57dab0469576a5bfb471f0118f5ef159c12f8ca4db0f42f5ef9ad21bfe44570cb430f0c1e34e9d2d562d2f000cee82151034b2a8a9628b9d5a89003344e8a75d01df37694d558c598dba1f55f1b394471d8dceb599a475bba12270a83662743984282b6b6d9bae0798e94b1318d5e835b16d4a86425d4297523597576f3bf114a5e52706055074ab23958df67e838c55c4d46a0a1d4066ee38474de881f089147f9d34089b957c5c340535f152662e9259525db2c84ab8a8d01de98bbb12e87fa4925110f9af508fbf1ef32ab55925d5e542be2ba9ca5cd29f78d711989480462b7d224a8f23724993cb231dee7ec0b192b7d8fe90f8186f68fb686863b4abc3801ea99e5fce9df450153babdef7cdda97954bb9be4baba3c62cc2f961998585ab325f5b49339b2d12c6ab04f83ac8568086d15c9204ce33992130dc9b6dc333ece141036f84c6a15bc13cdfb6b123ba48518ead9d7780d5aebf714ee5a0a7be82b9bab4b63b32ecc6b1221f762bfd86f428022695a96cc106a13e56ec9565bae3c9c345a6a6c016e05b94ea1c1a27d8e24b96098756d89d7534c65c6c5960ae1d52e361c2d4042ed5e469a94f1ec75fd47f8c4a6a35661bd81b75e8181953e64d96a732f4b121dd1774171b598074c99aaa32e2e8b30d4b7223016a49285876518a5dd69d65c9faa8032e57830c26cecd4f30ad8b5e78ee5deb63e3545742b20dc535b0fa733753a52a2afcd50d4707a32815040e875988a5ff2406b05a563334879691700456a884af19da334b95e4d74b99c0684e190f1592af0c29f084b55e08dfe7901207c51fc6ce81a7db44f8d74f575d373bf0a7a51fbd676a2d0e938841547ae8470ed8aee43d8205b099b0cb6c64aa82879c601f1f899fe1b997b657eeac0f5e85a4d0c68a419079ec4381256ebea76f4f0cb05b2e400189930ebe134dba9d6184f2c074379bcb262a4c20c0a0484aae3106a7dcea38c65045e2abb8a57f9c37f4c5ef80a7940c77d2e7cac44e3bac7220caaa81619a808da859b3f61be308d251caaae76e8d7125f123b28c0836a680351cc3437a796dff9c3e0b0d7eb1d4baab5ec83954a03baee050f7cb552b14f13d91b5de45884f91d91e5ff4501b4ebd8e582d6711aea3bea09e65090bcd66cf8bb2f78ad410e28a24c32f7940942d66d8761cdaa09d1bd3f764ad43fab7b613f6be1d11890f36be3d40d63a052da5578544b880f9af1fa24f58dc6979a6489e7bdff6ab2ce929c66513a72f4c007fd40fef972ebbcac5ebb2b62d46276e911b01f58a29336741509d46a7566fcf7c7fa0f2b89f8d5fadefbb472d95dbea36ae1e1086135e27b68f340dafae6362578ecf9ec2d52ae4b25e843a59eac98026e97485d759278ffab2ee9980a3fdb39e42d50f314ff250aecea2ae01a567138bc6e6b451fa21890896883a7c49c06d42ce41b581582db8435d59a7d989e498b9a8f762c387df5abd0f04114497fe2169b157e3ecc95c8a5d58de3d492fdd6bc20a9079d4f001cc5189da5ea773463a1f66e225cf3ec3e000f1855fc37bf55c5da7b3d454d736b9ebbf420ff37ed12033d8d9631a89b0192b1028462eac0b905447938bbe6a95fb391b1bef7d9cb6aa137b9ee1239b4240ec2b934d6eb62fef01abf448d9ba653c8caf7ec1c3120b568647b2dd3e100879487dad5ad9a92dfd6b5c09ef36c3fd98dab1f07f07468fa89085aabd60a3ae35358c55dc22e0c0cd8e851bbe60703f2e9dd54558b4642738e3f371d835d07e18c69d10fe9eccbb068db0df56461bedc8df52c3338dbc9eb5ed3c3dba528554e2d2a9000217b7795f334c7d1982f76f7e358e383058bc72596bcbbd2ee5ca9934ebee4006fd96a4e8e2d809ec9dae49840b7f3ee75f69cedafe3196653eae816e61b3ed00ef652ece4cf0ba19ece55e9d926aa050f4d82a8e662df737d4293f5e6cf90402a9c39fef62bce26aa174a5473fb1a272a526cb5099e34db8ce16fe52dcf053b738fb03073f04d3798c66328da70273d6a5fb0b2d0f7f5d09a65ebea361d0616f5699189c23f89323e82d6d8fca64b7615ef8b5e333aeb6f317bfeb9677de7c5050f36daca258afb8c46f5d6baa2599a2c7dd90223751940bdfe052e9d4d763a21b43803784e0233fef08d11f15680076526c603ca0f3befb892a806bc83faae1240736bd5aaa9b841edac034b80b4b0ca858374a269e6a773a3c5732767f77082a936d5470e2815a60801e0fcec07a13d5caf6965a7e4568ffd65a72635fd8d8a3222d3d28831dcc7fcc61e5e9a5fbbb367d89e9ae351e61f80b18323c7dcdbdb6ca0c997ee702a1d44a5d55c2849e657dfcea2ce72e9222b17169e22a7f16604587f7a06fe91ebc8e00448e30fe8bbd9f68bf1f1cdc2e305dd835fb88fcc3ee74993a6407afe73f57317b4e6effe423acf140cef382c376f5fb1354095f743db2b49184ef5969d0cbe099a3c4b6d8d6e04e2b553bdaa8172a69a4e4886cdf675750577fc7ff1f4ef5ee5614fb225df9c55161c7bb0f401b33e34009e64a30b05d6e4e3d38630d520c8f5fdce2f2685d4b7269305eb86ff08a2059919fe0955c766198e12d7d3b548974540c8539e5b2ba8b48ff6685ba7af75954a09d2b70db294d2c5fc0acd57ed6bb017e8e213d6c49eb4a66c4cffe1fe07d19811ccae76f5a91b275908af77ca668fd274a10cfb8b55eb6db36ad8cfd2610917d23500d036899a377e15f578a2cf8eaa2522af4d277dcb8f2d26720d4ec301614347a2802783c181f2a69440428f54df7a78e3c3291f7c74303d74ce1337af773dc5cd4096898977910290964ba3ec99c832cd3662e4b0f6c701fadc2e06651af75f7a25ff6b0906c00adecd42420c91df8c07f9f3c10e598da5c362de346b1bfd6bcef4edbd340920780a8450238297d223b0366e68a646da4f7a07ea26d8210237712305f2cb51947393018b18da896de9ea110105bedcebb4785fea55cc37526451026be01b3049521740c68269f92bc1c9d2d5bb84ccd4337e693a67a9b2b7f786364d1e94b409424be6b855d537ad6549fbb182fd3306fbc176e5443e17f9c83e651f61f1f2d81a89a6b24ddebbf24219c0019751c64aae7a39663a4c07d84011562e35f3e81fa39ee12e99e54f4b86dac01b45bb6e9b84f7ce1c9321d8c3176e19ae1e2f9d0653e0f91d20518541d7f3a0008bd9876a1a4cabe449b695054fc87cef132fcecacc63963b4456cc8cf6e3190b1cb19cea3d8b374e8483a6dc17c450f502536bc83cf5f36bf94ebb7cef09e4ca60e24bcd078816204791d06ef4b1d38f079291ebb4111492a02b9c63fa0ac7b3b7c8b156a3900a5db38a97920734fd5c909f4aacf7ae36395d49dde0df1294e7a7fdb7f738a16959ade7b91925f84d2ab605eaf34c5d27e5584cbf2a80345f87a968b0b307911aff323378debf79c0b7d1e0ded2745d046ebfe07fff9777dc0e62eb810f36c1f5ce2b2e5d87a7c4b7952c7fdfdef72c20061a35f2b67f1e295ea3df22c1edcd476c27937313d697f450bce5e79dbc4c55d212724220cc7072163fd0ed1df3dca70d951c114d837fa2467510060b313fb49ac0e482f142949d271c3ef80f27983362725010a899b3a735eaafa2eff2244ccecaa1eda537990e86681a5f0ef0cf35b12a78ba0e931fae37de1a1b1360bfc70792f04cf33589f3017866eae4b73d2340e118377592834279eb70c64ea07c540d5deeba076a6d5cb7e3cb802531c114f322b6eed0f64a96f35ec89da80b660e7335fd40bc52ef69f0f7c8f0c43f99b594a05a31540f2ddd6644457e5a05e9fb6520f7fbe5249f1da19e79857e16963680371db1a4f3884171cc7113dbe11da49c81d4bedf13d41d30844a8c5a05301d9a0ab22848aa67088defca8ee4ad2a1e97cf4b604e7724d0f55155ca0a00bffacf2c18683f7d8d1ee42af7eb62470fe20799f945d339bdd5ab7115e13bf6ebb2c91d1fb37629e846a72b49f9e450f5b9366248101fdd86c92823460ed14cdb673cb51f47ee33aa5ef6873428c9b2c83f012f970d73b596d125724361a723e25e855ca5fdc5bd4c360f33c9177d9b62c2aeb2ff4ba587e0df8cda68d9bfe7692b1b5fea77ff9c9bd1d6345652dfccab6ca0bbeb9eb36fadcd02d37dc027b9747f75139e6ba67a28ad53974f381bcd7f9b701a8c0e6a8ab688a270dd205ab22c2691c99c1b621eb44c4add6aa90227285976666e29768fb8b62ecd9125da2d996c77598b4014a775a2b87a27fd699f77c3372d8e6abecc66d98ac22ac859de26e94ee21afb274da8ebd42ab352577620dbe170f228ecd17341e0d263ef3eaaff6c93ceda20018ae233e125a40d58f8b253d8300361f2b372fc0e78a5206e89537faad1ce5c12bcc2c8de0595cbdabb921a6e6cf3a011ab2ea923d5290f561f3235164628822b306dab51caba864b547a67c906d26061fa139f1399b9652ee6b48a4f64e94c2f69594a35da1c47ca41ca92d992eca1a632e95a4df2307d944bdebeca3dfcad8ae6e0a6a2121daa9498feec95f6102c42f087853cd08aa3bd17be0836f781e82ae9fa99f48af14ccacd84c0355e06cf6cb78a9debe66701b589aef064d782ce137d4d768530c20d0bac4847f5757e42df19b80241fcd1303c3385130e4907f27bc108fc0757c2da0ce44ad97d02fef76d347653ac5fa2beef8810ec63692bd724cd24a564f211a3a606fa35c187c2707df3570aea28e508b3aa763dc9af2935e7b8b530710fe84e3c3867f961b38b19f49a36c88dc773050b96df78643998c10a7cfd3ac390de8a831617b19ef6b17cf3508fce7008167c434139fb78284c6ae52af64617f588cf62359c50254e698f741798cd809c1500d21803310d9cb6f8abb8cee2b75b6456aa8007a9dcea41ed0b59684f981b91b407a0e162d3950078f0f5a1654ad5232a894ba204132bb9580e7d59a504060f3c0e51eaeecdb734739d57fec62c1315bbdeee7163de0bc057c8fd256b1e6ae827b979a5582130fe5f2c1df22b9046f794b956177822a6e0f2d00519b9a0df5d9273770ea047c6493b2b40c51ae392111b272f3a6b649421a28d59d4182e7e9092aa2b8fb697b1fc084a7153c3b470005ce1165a13b1f472dc3b40076094dfcd7db2930da185fc526a24633fb30c97dd2e0a34a3ac583badd2efa6c14db64615ec3a198e5bba9efae6504e6c7dda28c633bdf597ec53f0a2ffa1cbc940eb33f4a7513c67ca72d823ab72c776654105d332157446f0b3881e2a7e0a7020e31025cdb2f62db80c7ae38d6df789427b0ff16b50967afea9e5b19e3f575384802fa35de7a407ae08166af85ca0bc43082989e905429ea6ec3b15deb92d4ba949b7f800fd8d64ca92c617a7252989db22b5bdc1fa4ddd2e17e3e108df5bd500a20d2b8702b3205311f8be322bc88bc04efd05e25daf67a03eeff9488f1f2c741937f93a8430087ed265728ac071d4c056f83b0eb04b3e530568c7c438fbc3568b4cf3c876deb3c5250c527fd39e1489240f61ef0af7c4f5a803c71e8ad41710ebaac681ed7827f56b94f15eeda01d52db6fe229cffe5560e1354a06cbc2d5ddb8cd2a34b40d50acc805eb8ff15507f6384b61a2c992f7c36c0b8d278f6b83b168065a73d1b13562ab64045d41b4e2c91cdac4613408b9ac3cb4438ee102aef9d2c887df490944bd8aba0be17eb61907f8bb8a7f338a58240bde3d52568a177843ebd292483f5fa9789735218b69b21ea0bb2d4c12fe143347148228a11074186480e0a0ed68b4dcad38e1ff6ca8d98b9f011293aab88e22deec8ecd6810035e82102cc06f0d4a1f777424a15d9bd27bb0c3e44e545f2d3fbc7131222225f9b54cbba9eec3990cda138f3b7b1f321db58ec94dbd5f9b9de91b492a1f383a2d8dff30c98f5a85c0832802d88b46fe8c6dffc6b23409470a632a28cc386dfbde5de8b337c3a25f35a760f1b34f48e6ae42b1139c61fb8d4ab8040991fb5b4310e776ba8cee66a72fe37f6f8d70d862fd98d196f28719311fcf1b7360196314cd4f0a8ca3f8f2c16a2000acbc803ce056056a4a2528d7be1f23fc5059613a53f876330690a029ffc20f8e8e408f0b959ca593bbf42081776a5d984409f42018760aea7db79aba966c1eb48ce068670eab8a5876b030965475d47480f6bd15f30632f5ce2edd0121add90dbc527e87099dbec04186e8afd12f31d1b609e67a232761feaa121909bdc64d4d57a03b6d1b4dcf30b7a9454994ad4e731ad6441aac4a7911211ad6c5bebd35e34f64ada51a43ad1176969460a75c4154f3fcd248e4888eda515a45e49d9432b280ce8b490693d4dfa3a898b1037f5f25cd5a663c99a41565dd765e7aaf29a69de6ae6c48170d75d7545500a5523689530c936744ac6ca3bf605828dea99d883f3cc2c6e068ec1eb7cf6b8d0eefb3ee986d12f8b82a5f38fe0618494d554bbdad73c36b1cff6625c19c1248d88dfd2075fa1b9ebb3cffcc29f4c6fa535419fdea4b926a9595896eed2c6cc869ae1a4aaf5dc6297098b9bfd5c8b6db84ad63e41071a3da2f969ee167d6c2def94c41b13c6408580d2634933d278e7187bda47141a0df21514d4de11918b29e410c63530ecf98cd167694c7637b64ab0af2eadbd872beaf755fc7d815bb690b2d0c2a714fb17f894290d23ee4be1901c16b6a59cda4a31e2531b3cb713c3be26dc3c4684a6b178461e5e2b5c17c54f5cf355a97a0beab2dc1cf487697b83dc83c93592aa3c165c32dc4d58a56685038f1e0558d2d279600dda8e2122d676ae8f9a6fd149bda4e00d708ad077089161a1c715b0ebee75f17354c3bb5b5075ee96592e063699a1969334fd17f58b80a8cba10e5596f66d283ad670ef2de525c35f343aa2510e484c43177b16bc4c96281702c54285e31e9dbaea3d6f2c62a4fb219d095a924cb62ef3c14b5ce626b405704b034579da2c86be211aa69609fc7305fbd84f8410f7ebe42ad8695b5c9c5ef63d960bac67c6665c74ae80dcb5e07dc93647721f4af25f32d9c3f37dbd2880609600eb46bebd8f3d295095b0efec1681ddf7d27a099559c6a2d3eb052e6ba0b46b029e7e27459cc2e6c5f37a4d4f69285a4a4b67532745293637fb00f837974e70a35b87c25ac2733707016f953fbf628f98912b1a755ad85278e05984114290c96a34e31987e0189ece3b8ee3dfbc4c596aebfb7f85a17cec45e245fad2b99ad6690f12c26e3487d0fc9f059b1d602b7a565188aa4b3c6b6cbffa0fe9ce3e391ef5e1253434fc13d23e012d7b36a3a85f16e49e6e829fd6cc56847afc181989166c074c82c8794d190ba62e729097be6d85a878edff2064316296240ff04987f90fedea7ed965ac52dca95d38501b4021ea3a4bf4c7e86e0212d9ebcc2f41e8343e465cdb75215c26c6001bc62e94b608533e1fde19ad15b82422a5c00d581c8ee78de942ccdb4566e4311545e1f0ff2e9d534fb156692c7d188f819e834bcacd20855554708660d23e1d5ed46f8c675b6b2f47452b436966e7b21b656236551724ba7f46dd3987ef3d489ae586b6c89d216e335ce59acfc5e84f3c49c3c621c94d895faaa7e7a2145512069698d5db3827be94bfbfb2090b6943f83a2f085f5edc303b3c4b9c41fbc9c34e124760a57debc55d583a42cc86e3a4f189543b5d0506f96a5da808c399ef59f7f345bf08994981d82fdb6c6a5efd356ff597965f129a6ed831ebb0dc12dec6b877da2096cfd13cd010cae2e1c670476ae27bd811c4420b0e2e422561bb6341652b34081070b6bbdcea1280eec5eb06ee997184653065ecde72967829ce7994659e928906ba0937383ea190e86c5b86e8a94b72bdcac1963b667440c47d42ebbb8ec756c45e919a955a094a3f48ff633410098779d4a7e18e88c31b66b27a31883fe9acba21ee1e4d999db1f5d23c53ece2eb8be18f89e34ca5a5d27873cf2fecbc87d691b0b62c4bdd2517801f2f11a96871e432bf1019cfcef3d57b9a36395335b52a30389566c99bddc00b1e3ebcf2a4988bcdec6eb9f2e396c294e90c7565f9e0868153b3511ed5fd68e6b909ab23b576d12bb93247","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"731e88edaffa707c0029a6b34fd23319"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
