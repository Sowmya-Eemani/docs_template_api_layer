<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"882f48e70d77383fa052f7102e7f90b58560f951faf2f3b7659ebcb769c477d520acfdf6a25c381a75c20cae42f135c7b4c269cfa120cc81fba76d4f5e655aac5da50f2bade30823b2745af495286c4085bc2952a1653f9a5fd6f61587ce1c576959f49d846b29b7fb56281ed38a42b199b13a41b752a71441df6649c4da2219480a94757b4ac7ac31a19e25b2123d45a7a3bd5723a188752df4a1b0bc149a571980b4661a32098e25a50a26ab12d5b70de9ef57bada998c1e5efc01f808b2b22fbf27cf9dcfc23711fa2dd95a02ab73cf3ead0ace0e008a60878f824e09d1ed6e3bbc0ff30b60da23c90a81ca789f78ba466bf03391ad9bed97b20fb22a308cd92d2c85b58daf3a49d533a9a37f8a787aaf56c4fb49a48d8cf356fda5c901b94f326f5538eedcd3dd63c3221dbad9aec50e70912022ec78e03e44b4c2b5aaa6c3d3d1c4fa4d4ce9e82063f4ebcdc2cbdd31c8a0cc821656be6d439bc7e8707fb2ce2d23244fbdae1564e95d0abff531e726e1735124717b066801d201af6b8519c98c0761fb9a3cd18d887de472ea8fdc3aad3077b906b064120b7c28b782f06a47299fbd18cb3ce5685120321db406451aa86f2ca5d39c4c01db0d8acf3fc8b1e9f62ece44a9551e7ce96e1ac7825b41dd50953e9781bf8ae5784164bd1aa75a975dd028ddee57a30e247c2e3158c1ad91cb418c83e332ac3b984456b827ad9d5e42e359718888ca3a800859e902c14a475e81d8ae82f745e3141ab1389988974e55ac6d191d96ac1fe6833814756928285eb6cfa1baea8a3c76e561076efd052a32da9082861454d2041d0ab1c2c32f47df38c05565a7992cddbda50cb2cfa7bf639fa46cbc0c3145f6ac7cd81f11dd66ec12ea0ca61e72d70c53a6470210cf0adb732212555b5d7dd91edfc0cd1489e843e95742c8107095744e23f28f1d4aa05ecc54f2b130f422cb50fac53d4814b351ccb5c4cd6294475124b8a7304aab22d57413b2c402740351b7ce25e5d1162a8f957abb0d97f0ae01ffa522b16bfc7962f3c8bc983364f20814dee9bd042bc622a933d538c1c1ef0ec99da7b618c7952c715bc7d7543222d36676b657d232d318b42616ba817aaba2fe7bb0a566f15bf96d5410a6b4f2ab7dbf1acc9745af62799fbe1ac0c6ac5cfef770224389afb11cb14fc33c48e9a1f73b55e36f40b574e0c6ca67289adc43ce06a27ef2c6dd9e8b36fd5a97b81f006808a41213eb2a06c856422f4e832dda1ef742080f7775e47c12eb093d1d344cde3c2e3888d8c8631f72db4bc5bff8ce2254c13f34eb5bdb9a68f785b46a8d2fd3a66ae4d1e6622899dbc4dfde4631518cb305dfe9ca967fc32bd9a5297ccc51b631bb386942d78ea7129b3279dbdfcbce7a71702ca108285bd8a4038f77ef91a6c3cc270332a6ebdec39eeb6a5fae0f070f5e45ac8219fe059e8a5c571d302e193cdde5a5f31b6f4a3ffd3b3b702521be003e5f7d555cfb99621aec247189a89a42b1f67ff2bee3e50340161aff995ad06ae589ef5ae27e1a395d83f4e37ee2d0d99357bb60877b1cf76cb5f6c903290f5adafa6c36695a7ebcbcf8b5ad11417a812872b00a3affe7c26486466996ffd0f6e31de7f6e36cdf9add9ac20fa48c23120f46cd688ba7039def7668c1dffb3e40584688989fdd5d1eba94325cbdf9ec3fe9ef4c432509904e7829965a9f88151f797fa400735b0a71ad41c8a46c85e9839028cfac046eb0dc539a0ab9960ea8769fd2bea725af23c5f9ed0e7ad2ac1dab4953aec6f988a9a2dcfa647f3eca66d29d48614becc8c49693974c64de06cebb33094a3bb24a0ebfc9ddcb8a0c6e7243e6c09422a1134eefad0d20b6144bcf6e60296726aa92f8f63594ddbd474ea85788eadd3844e270c9f178685a5cea7ab8cdbfa88cb085d86c9403827547632818d4b196dab33f2281e070cb58532bcad6564255f7c664a974b04d1bab487601f610e68156f0fcaad7ae196288c17f2b8c5b9b421fcffd199203b328b41c424a3120ed4795f9197b73a41b4ee50d8ed430c55b2578e7504d94326c072ce1796c818efdf07192b6fb3b6eea30e4471508af22604f0b53dc0f3767e9d7be8f63e53aec1713f142972595210f32f4223437217a4112fdebc2a0f942d6bb6ac3688416373d59ef53306072110c3fcbebd33873e885a745e2670e9b92bcc3bc96bd5479843ef18f9150eaae77fdfdf96c2625377ffa526cfbe92e308636875b7008adcae33242fbb17b0c00db4eca210cd889194bcf189f8603af444c8dc28bce849de0da0ba0c77920992c0f2a106487248c922d60df55436767fa8923bac1609c0756b7bea7cf63628afe1d2e9f5d136c58c006f92d24675145ecd23e736a666fb4144d83030d71317347f2064e5db321d25cd54e34c37e9ffbe05e32e34a648f67089141ffabcd3371e38ea9c9a94d47ba9bdb85a27769c84c18c65f86a66d3335a5c6da2da1ab8a48291ebec763e58e73127f9336260bddd8b063f9abba7951a597fe18521e8b65f606463d788164daa665e0f5cebf7fd928dc1204fd3cb4cd2ed8af70c6536bc95e7301cf2ceba802fe37c1f63629e334da78c408689b62f588af9c6694043b17099acfd6f64fe737f0709b965a14cf7f6a4b4479cd103ddf875a7ba5727cf439731bb0d23725870cae6ca5e2747708c821cd8be4a1f34b07c86d648941d6105780d029264e6901a68e90986a45468bb34af0795ff7a0ce9b05df832f0239dbf4721578b9196d98e4654fa9f6250791fa77f753d378a5b4cd52e8227a52d2bb18dad7cdd745602adea4c85a6f3c706ff9af6bcf5faa25efb6a207f2afbc363fc892510f725adaac15a0da1fb4be3c49f06409b627913400508a4ca6ada51952cb93a53e54fae25a45ec1ed9cefcd6d73044f6a6a333528236dab9c57fac74d2410a20a7f275b5f189087bc87aa55437d88008b969785c5bd39bad773040b81b2e55da779d8523c40e2254f1d50b2f21c9afd7425913dc3221f7d9a23d5c5456301963d81189867eff39515de9c634b1af5ce95809238406a3a1175163de1e9dd92963ed378f3650debfbff3f2830759d110e4ff921168a3f451e0928f9c0fc322183a10eb534e8026e75199186aadd781dac3bd7bf6b9c6f0116e7a08d16a55aeabe7d2debaaf017242f015032f8b61d33230cc823ede31608d012ba9f109c3eea0ee1e538e109a7fbee87faaf0a1682d06b097110baa3cc4db70147cd798c26910549b4b8d34e80fc0dc9bbc0bb1171d80deb360f1e3aac1f1a2beed1b8d7fb77e89d99491359a74bee793580fb643064af47491adc599bcf238e9fc44364c80e192b98d835eb67fe9a0299b561e57ba7a5f05261f3bbef7993430845f998a9e292a7a77d99ac4aa65c6bc8f4920a632207fd3c74b20a1df15f28ebad2043494266f7023a9c84e2674efda6bb48630f2152f37b846acaece38aaff9ad73e9a16939f42dc1137ee1078c314fc2177104ee4271bb026f6db970697e93d985fe9078eb5604e49d4d809550fb5a10736559f8f18a5e89319cfa8ba6c6ddf562c826e437790afa4e7facf701dd5b1deffad58d6f123d80d80451deecadb0da7695dacfc3dbfbffe621cd6c760fb02d7fd6c38cf8d6df745055e3831c3e3ef038d393b2e1d0e8efcc63b222a837997c8773eeea3f57b48c12000c81188bf9cb9cc784bf51a25401f6e597adec867b8bc04c1102dd44dd89c750b51941b8d287fd8144689e0799eed5cd23f1a931359641e4dcead70a986debb57a2a7cf14157a979301ceea47829ef97b1a271cf31359de1f0b95c38b5c17b4313f39ac7d8ed6ef2931a4a9e32d45146a2635e08255b931cba9f35b09bc80b78665af82a6d46d82ee58ad7bda4b2bb119fe73e358480eddbfe1daea10f0bf5a0cdde09f9ce7e5ec4c2c30c936186c17e553adc30651dc15b715f328c9a74a9d1139428c96f1305ee50e7da637cafb83ec4c67384b2085ec217889b13ebcd63ffc80d24a4c136aa4774da2aa237a73776962df64a54e1d4f4e765a9ff75efbf2a6719a8bbea537c74a0b8b88bb17cbfa3fa5617ead3c333c5460fcb7559bfdb73df7baf6c7937e2f8d510e1c740cd717cee745cf20c93a8b97145820e241e8bbdac60163e635353a2e4ac423a2df0fa77c87bfad63d53c9bdcd9ea7591fe3aae8894145394f08ab297b4b7b984dc8d3d749c1011c2e8c4042a616969d2e80905943e4bea2cf2f1169ad9d2052af33afb8045e34d1cfeb410d7fb955b90f906b5097a20bfb8ba5ad2731ead4ac318bc64fb3960a54bc5db10a538289e9ef884ec86ef6ffcc360da91836755f7f9fdc0ef76d42e4164f499c007d71cc664b1a927ad64a774e7574fa1ba1d0e5e4271bdcfc730d147ad6103416884b630a45cbaf2cafcc1de717582c239060ddd3de82a58b7f7c6cf02a416256bdff5e78d73fbd17c0a445050376ae503d9af91b5403ef5cefc5dbc6ca5fa2f343619e6957507d117e3e8707e904634c2c41d4d4ad2fb93bf64bf352d8dc11739b0d81440fd544f7b0fdc6a132bc8b6874e41748fa0b25374ff3227e184c68e6967f69f1121f1ccb371687041ddc51c3f2c813965fd031559db25f3588b8e2e2217dfc01a6f54b4c5ee18eea4e3049aa0c85f521ee4b38422bc59223f51a2da1551f0dab83ab4eb9091ecc0a06ebca01274e42d16e677f0714fea72f3c1e0559b4237500942acaadaa96e466a3c3e18b15482eac660182581e1bde5a64eab93feacb6cc5fdd13dfb06a5ed050432816c5dd6239527170ca1d7992fcbc355b76dd4cc44fee99bbd95b18ace3c9a84dbff2e11f12b8bcad247a926af36d695b19fcad8d431001645c2432d03b3a280609a44a67bed6570c00a7d8a82fac95865e241be3b72093acc6be0107292b8164f0604902f57028f437064561d5e563912d9beb89ae2dd6a0eacfc6947968683f8dfc453a764aed96619ea5499a8e81885590bb061007e2ea6361f9e094a2891612019101f1bb8e64fc9483dab0180216709d212edd1e7d4aca0d0f523707a0e18a7b2ea3df294fea6ca3c1b42a7881ef614b2d6a3bac33a4ba1bc751d970b7229815a96ce75a97b7c7a80747ab68a0c4d9ef3862f1132720ca27ce87f8b80d65f7d15dfdc158676dea7dfa8dccecc9833cac1353574b1be8d2732e4b1ee8f3af529c0de2a2a704a1e768bd7263d42bf1f6","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"731e88edaffa707c0029a6b34fd23319"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
