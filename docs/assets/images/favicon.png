<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Protected Page</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #4CAF50;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #4CAF50;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #76B852;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Protected Page</p>
                        <p></p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Password"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Remember me
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
            const templateError = "Bad password!",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"b402c76018a9f6ae2f380f3c5b75924215a48f6f99db0f6600d437b3beb976d3cfc51c6e3a7d84b6ec9747250390a50422b8add9921dacf048b57ebb460ae4dbf06c0765a01bdf6130152815ab5cea577110eb40fd7ef5f9b4c6e9437c956f9dd9f804d9aadbef2b7897fea70b5d1f24ee409b219a6e6cf10704a8f3f1f32ff0b7a7d121592f42c06764d06b20849fe431fee62711cb15b45bb01e2dcb798f9e9a267a057b000520beb2681e7f6789c5509416784d1f9f8025fcdb7c494ac7c6e123b60c3d94e93a0068bfcd06cf281c1fca1159f2d5b6a3a648e876a421f822aab1536d9d6338c213323d18ac8239fb4b1b389dec1c5849cb5955eefbd19dd85cab9f686ba6fb5d570b2bc4ea29a3eaa1fdc457bbd20bb32a42a8856f7f1eef2d295cc979eb94667e65cb60b8f745547073beb3a780490fea1fc88076dd213d4a1b8e471d40de52bcfeffb7f854d7582f6554538c0673bcbabf019c62baf59c71a2fdf55a7f1aaafefb21a33f2c9b25e438da174507e9f922577285d2ce830a007565e93a1f449a66ba7549c07761f7310d7496c89a23b69da3847769403d4150c977b631c814fb0b378713b319a03946d5e0d1a826a3684db733988c93c4b55a28eb5808c6c03513cfef4951904cd53de4ce6943f09a4572d1d9f4e136f80c2dd5cf53e5f95fffc680cc4bdd4e0a51e6a7d6f6277161fab5464de03e075df979290724833262a18f5ddc112b54f9c210c99a29dc9b36700ca7201b3c63bd9181d06a10c7d48b64e4ccc4e4a6e518c97c9bf8a5a8bd1506d592fcd56b3dbb8a6b77759ef20e1320404c4ca8d04d0d641005e4b8089788766c7dc5291ed7ce8c7175e7dfb86789271f3f32a6a1903eb950e81d58ec84907e80c5ab7287ac7d166224edf0b8915824202f329cb431735211528adeb6dfe0f9ff8e0916c3c02379fe669504355c216a570bca14eff1b877d869aa44a20b5bbbb93174c857a0601b2c52a7d7d7c8ffd27f0edd2f16932068f77039239fd5213a773136e74974977fb592c89fd9362f474ab341ae3176d54914bd89a449d40afc4632193cd0d725e2c90e400975187707ddeb8b44d1474f08c979e3c0cee8d1139ff16d6718067f066b49d36f7120948cdd69a6665a3b1d2ca0ad18ac7aafc0002f036845c7423fcc16fe3a83c3f1c11dbb1eab9a0b9306f64dcdaf913c2bf5dcfdc77b4247d2609248173f310852e95aec3c907aeb281c001b4300c2d4de849f81393bb68b6b43c4c74e41b9b31d1f88d1101a7485f16782bc72ea21a7c1bdd9b806c5c2b0d011f0de3a57c167e358b80ca0cd97ef47fafa1855964fcc3f7cdfc37e46b023af175a6667200c17accfdd56570973753d74e31ac1d67a5ca5e6314cde45d4c15713acc7eab2ca5e0051ea1c958d25555b37e1e6f2fbf7816c444c555fdad3204cc2acf69d053e6d9ee44161f923a3609d2440cdae7148fb82a7eb7b198729563601c530d4bc1276e4624c181c02eb7803a02e6a4c2fc3627835fba32241a0beb36fa8b01398e4ccc94b57d727889d772248bffbcd4323786cac1b642fdb76ba98f9ddaa73531839e57e93cef42e202017fd069ba203759cdb97b7e6544b071e04c13daab5f7dfb5f2ce76763860b79d91e165ce4147a2ce7b46eba0527f96cf57bfb665004412e4b1400be05eeba353a6f3409457a171ca676a21616e1b1025fe80bbe73f3a5955773249c437d0a8ec543b49b3cc73f64de97b6c2da32ece370b6deb61af030a6b383bd7daff4a1893ceed1af6b431f2f38f4308644caeeabb50b6eca5153aebdd638ba570c526b24382983970bf47be09330214ae37b541fe6ec7de0644055484bc227ca0a49ff5ea46a7bfb5078f4f009cceece4a8de38c34c4f606d6b09408bd87ae987c970b17a9baa691184676fc27bcbf2d6b03ee5169f81c77ea8acd229e3f8b5dc4b965f843351b9cf5efa1d3d9883a1d06383b224bea395232662759a2d52d24610d58ad3306306601651ffa980fc90fda8ca18f53d412edd5cb4c333292fd61926f0c4a44b49a645d15b7fdaec4920927ddecc9e1e8240eac7a33f56724cdc71e64a86dff7959c83d76f69d58d62acabfb65067a4c4ce8521d10c3fd1f374d690d0523a27b045991bf0d6fe59c142fe57a312c1c45d1eb3ef384b43e49ae4580b9aef9abdc83ffe18283021be2ec884514a385d6dd6c9590772740da127e19e9d61b05fe79e63b8951f1571583d20b931489040224ab49251adabfe63262e2604e320228bcc8facfc4522436f531e478f933c865548d903ade5846ed223679135f4a97a0dc43e20d313fb08f408fa8b84d2ab290dfe85380e1f2c1ecc24036eb1465252446960e36fee979cce2d98e49588c5b8d24a98e6a4d059a1451a323d3257d0da7404e72103aae831eff3b572b698c92b4ee42b77c5327c117cdc77f330bc6e6afa5e2b31085dc96173a375077c904fe391f771b750596673094e323285224ed0c6391eaad8a3e124e9602347c80f9aa5c16050668755751ed6c48ec089d0ecf638e2741d9bafd014adf3448ed0ee6accb371222fe6f6d40c5595b41e174e9489b4e7a58dac22fe190e6efcae6eb8ec73acc925f3e363693ae92895f549b0ac22367895064dbf057e97241ec8ab75a20c7c8e5a662021b7ea8aec2da2ed6b0f1f808495c1b25192fb26cac19b0787d0d6c689d13a3ee31199d2a6e520c9217c1f9512c38fcb88e8cfcc8591592f62764f7ee102fcd37bae2df02b954c8bf0a5f9f2a4b034487f441c6ad8d251ec96b0467f8b0f0b9c2f83cf23aa724e8d52e707860dee4d3ab418bd9b6a52213a7c69ca645a5d437b405cce9371f3922a1e4d6fd346f1fcc0a731c37fc3b10a5d4eb6ce3b0b3a34ab558faff5ddc74e20b667027c24db52b9a88c65e967d26835fcf07a6d97033b90b417dec045fc8c058f0dbdde0ba4234dbaa7b0118205798d828e8bd44c1611c962aa360de96071681c557cc2bc6632b9b018e4f01ea307eb5415290b86bbacb3ec667fbec817e6e4b866614bef021cf1efe8d71ae64d4b234e34b18eead02f4e028dc332baa467f57a940996c20e31ca7dd35fafa8919d57c56ba13c859813190a59dacac19beb7854c567923e9c3965e82a6f5a04da50806825ac857229c2263247cef43e78df3992f52134663669fd52340b9eaea8673b1fa3c59effaaa0b32d28e04cc0a0ccf627fbfd0983fe865e72162bdf77c346fae6443a096121d9f9a3500f398a7a352af78f6bd90b69d2897a772338134dee4660dec5353d00413f4084333376b293ece58e741679b7eeb3568bbd08b5b8009994dac4bb4b37f0faf0abc8c1d9cd628c6964dc74d3743e56090201f1f106fd28809aca293d4854bbd66a4e818d5d420538bfd228f91df8737dec5420afc33fae082621baf526d57a1c89f6c9d3b4b5fa896d4c590529625208d84b22149160f8ff4fae94ee60f1fb61d2980e7f7b96b5ca426da1ca54bfe96e2d797d6518519a269e9f2875974a39a4c18e737b87a3e3c9e429a097545369d0d30bd45544aea3c3f73ba38ee092e170e93edee012047cdbf079454aefa4467a4310448d2b2b9af44d4d5580715c4bb3240dea897e754fa7ba8f01d553f38fbaa30dd399a4183ee2789bee5b3fa3a063a8c8637e9454f9e3030f44d8443b981996830f1c076356be72cf296f29edc91cfb89ec18de64741eba3c619dd6e173e1a0df0ce8e25f342ffe94ac4e53a063b1bd1c58780ee8a8c729c56890d93c0fe713c86a64dc67ce6f79b45fd46bb05bd4fc2fa63cae3df6a3da3bfab25fd1a4b8303ab51fd8d96aff853144b95c3c0e23df24c1c8de39b840b975ba44c5ad23715adf5a2a1446a683825f2de3fba083273521b859b1bb9c6870f35ae451473a37803bb7a94624a9a61b7f757c1a14e12b031c0aea35d7b8bbc694fb22654aa0fe1eda0dd948c751bcc6b8e3a04d58d0e1f2945d9dceb1ec2246e46c53f0f439b5a6a14031dcb67256ec28de25963ce4307ff2d859561cb355fead74b6c2127868bdfee4dfacfe6cb06017f24b5d6d428f85efa7b4b5a1de03b0e8aca39de7e4662b1a8801671bfa03e7bfe72a8bdb2b70ca412a7d10cb69e87ddd46e8c34e18a8e5c7302372cce8d53b0501d62760f2efd647d6d41c008662b430a22b549e91974932ea2a0bcb39aa29350a00fc340f985aa14eda92854e745a873c0bb8fd2195db6be4e23d31314df9c40694236f3791c30c649f338740287e6545483fe9780b786b34fb6f84eef4bf780b10334165e7fca8c4bf900da01920ed8f41f4a537485d98f07a8e90106eae101dd0bf5b68bf8501f42f4c73edb82272e95b1b06e5cae2fd0f22d5e00224e3568391157b8bd1b5875faa1ebec229845171648d6a646156a6d6950b28dc6d08bdaadabc1d26b363190fa91b5ac36c897a9aa2f5f24003c850e8a83793dc8c14895f18bcceefb70040b85fbe974ba418e5188b32253754a8188673bc6b23f679664c2656f721eb73a091cb20e5f6f7731235d96b76faf06b0af825ad534ec3e4c30831c85b45cd762f847aae57a62f8f8cb1df36231878407c4e0ec04659f7a13cdd4358193445f523b92c1b0ab34c80858612a3855f81f6282beeba3501fc8ccc231babe4d21af3867e9a5ffc04aa3454292eee0e2f0693ebf606646542df4b4f0ed90f3e461b797b0b5e1b983f9362492fea436eaf9cd570de3f5a953df2fcb4b0ac6127baf975852603fa572bc0098ead536407ca0bae6c39be258685a3fe81891eaa1c2c44729c18f2679c02b3924025fa3a6984c2faa47613307f3eb93b6baaf987b01d71ed4a2ff50b41d2cd250fe95c03ed20dbb68d06335c8c2de740f11d51babb41f76148ca680ec5a57dd70823fcd8277922e00d87e5cd00f3d88ab741e86a5","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"731e88edaffa707c0029a6b34fd23319"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
